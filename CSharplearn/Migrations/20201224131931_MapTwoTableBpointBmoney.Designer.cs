// <auto-generated />
using System;
using CSharplearn.OO.Entity_FrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSharplearn.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20201224131931_MapTwoTableBpointBmoney")]
    partial class MapTwoTableBpointBmoney
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ArticleKeyWord", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("KeyWordsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "KeyWordsId");

                    b.HasIndex("KeyWordsId");

                    b.ToTable("ArticleKeyWord");
                });

            modelBuilder.Entity("CSharplearn.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.BMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddMinus")
                        .HasColumnType("int");

                    b.Property<int>("Frozen")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Usable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BMoney");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.BPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddMinus")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Residual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BPoints");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Captcha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.ProblemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId")
                        .IsUnique();

                    b.HasIndex("ProblemId1");

                    b.ToTable("ProblemStatuses");
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.Appraise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestId")
                        .HasColumnType("int");

                    b.Property<int?>("VoterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.HasIndex("SuggestId");

                    b.HasIndex("VoterId");

                    b.ToTable("Appraises");
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.KeyWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("CSharplearn.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<int>("FaildTry")
                        .HasColumnType("int");

                    b.Property<int?>("InvitedById")
                        .HasColumnType("int");

                    b.Property<int>("InvitedCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("InvitedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KeyWordProblem", b =>
                {
                    b.Property<int>("KeyWordsId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemsId")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsId", "ProblemsId");

                    b.HasIndex("ProblemsId");

                    b.ToTable("KeyWordProblem");
                });

            modelBuilder.Entity("CSharplearn.Article", b =>
                {
                    b.HasBaseType("CSharplearn.Content");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CSharplearn.Problem", b =>
                {
                    b.HasBaseType("CSharplearn.Content");

                    b.Property<bool>("Audit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedRemoteHelp")
                        .HasColumnType("bit");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.Comment", b =>
                {
                    b.HasBaseType("CSharplearn.Content");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("NeedRemoteHelp")
                        .HasColumnType("bit");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuggestId")
                        .HasColumnType("int");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("SuggestId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CSharplearn.Suggest", b =>
                {
                    b.HasBaseType("CSharplearn.Content");

                    b.Property<bool>("Award")
                        .HasColumnType("bit");

                    b.Property<string>("Kind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Suggests");
                });

            modelBuilder.Entity("CSharplearn.Summary", b =>
                {
                    b.HasBaseType("CSharplearn.Content");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("ArticleKeyWord", b =>
                {
                    b.HasOne("CSharplearn.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.ProcedureObject.Generic.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("KeyWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharplearn.Content", b =>
                {
                    b.HasOne("CSharplearn.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.ProblemStatus", b =>
                {
                    b.HasOne("CSharplearn.Problem", "Problem")
                        .WithOne()
                        .HasForeignKey("CSharplearn.OO.YqBang.ProblemStatus", "ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.Problem", null)
                        .WithMany("ProblemStatuses")
                        .HasForeignKey("ProblemId1");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.Appraise", b =>
                {
                    b.HasOne("CSharplearn.Article", "Article")
                        .WithMany("Appraises")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CSharplearn.ProcedureObject.Generic.Comment", "Comment")
                        .WithMany("Appraises")
                        .HasForeignKey("CommentId");

                    b.HasOne("CSharplearn.Suggest", "Suggest")
                        .WithMany("Appraises")
                        .HasForeignKey("SuggestId");

                    b.HasOne("CSharplearn.User", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId");

                    b.Navigation("Article");

                    b.Navigation("Comment");

                    b.Navigation("Suggest");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("CSharplearn.User", b =>
                {
                    b.HasOne("CSharplearn.OO.YqBang.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.User", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedById");

                    b.Navigation("Email");

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("KeyWordProblem", b =>
                {
                    b.HasOne("CSharplearn.ProcedureObject.Generic.KeyWord", null)
                        .WithMany()
                        .HasForeignKey("KeyWordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.Problem", null)
                        .WithMany()
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharplearn.Article", b =>
                {
                    b.HasOne("CSharplearn.OO.YqBang.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CSharplearn.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharplearn.Article", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSharplearn.Problem", b =>
                {
                    b.HasOne("CSharplearn.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharplearn.Problem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.Comment", b =>
                {
                    b.HasOne("CSharplearn.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("CSharplearn.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharplearn.ProcedureObject.Generic.Comment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CSharplearn.Problem", "Problem")
                        .WithMany("Comments")
                        .HasForeignKey("ProblemId");

                    b.HasOne("CSharplearn.Suggest", "Suggest")
                        .WithMany("Comments")
                        .HasForeignKey("SuggestId");

                    b.Navigation("Article");

                    b.Navigation("Problem");

                    b.Navigation("Suggest");
                });

            modelBuilder.Entity("CSharplearn.Suggest", b =>
                {
                    b.HasOne("CSharplearn.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharplearn.Suggest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharplearn.Summary", b =>
                {
                    b.HasOne("CSharplearn.Content", null)
                        .WithOne()
                        .HasForeignKey("CSharplearn.Summary", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharplearn.OO.YqBang.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("CSharplearn.Article", b =>
                {
                    b.Navigation("Appraises");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CSharplearn.Problem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProblemStatuses");
                });

            modelBuilder.Entity("CSharplearn.ProcedureObject.Generic.Comment", b =>
                {
                    b.Navigation("Appraises");
                });

            modelBuilder.Entity("CSharplearn.Suggest", b =>
                {
                    b.Navigation("Appraises");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
