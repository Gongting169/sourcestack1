
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <span><span><span></span></span></span> 方法的参数传递并不像你想象的那么简单……<br>
<h3>
	<br>
</h3>
<h3>
	值传递
</h3>
<p>
	默认传递方式是值传递：传递的是变量的值的“副本”，所以方法不改变变量本身
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> age</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            age</span><span class="pun">++;</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	调用该方法
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">int</span><span class="pln"> age </span><span class="pun">=</span><span class="pln"> </span><span class="lit">18</span><span class="pun">;</span><span class="pln">
            </span><span class="com">//值传递：传递是一个“值”，或者理解成：变量的值的副本</span><span class="pln">
            grow</span><span class="pun">(</span><span class="pln">age</span><span class="pun">);</span><span class="pln"> </span></pre>
<p>
	这和变量的赋值是一样的道理：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="lit">18</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">int</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> a</span><span class="pun">;</span><span class="pln">
    b</span><span class="pun">++;</span><span class="pln">
    </span><span class="com">//a =?</span></pre>
<p>
	<em>演示：使用指针（&amp;和*）进行查看其区别</em>
</p>
<p>
	<strong></strong> 
</p>
<h3>
	<br>
</h3>
<h3>
	引用传递
</h3>
<p>
	传递的是变量本身，需要用ref或out标记：
</p>
<h3>
	<br>
</h3>
<h3>
	ref
</h3>
<p>
	将上面的代码稍作更改：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> age</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            age</span><span class="pun">++;</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	注意调用的时候也要添加ref关键字
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">int</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="lit">18</span><span class="pun">;</span><span class="pln">
            </span><span class="com">//引用传递：传递的是变量本身</span><span class="pln">
            grow</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> a</span><span class="pun">);</span><span class="pln">   </span></pre>
ref的经典例子是：交换两个变量的值
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> swap</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">ref</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">int</span><span class="pln"> temp </span><span class="pun">=</span><span class="pln"> a</span><span class="pun">;</span><span class="pln">
        a </span><span class="pun">=</span><span class="pln"> b</span><span class="pun">;</span><span class="pln">
        b </span><span class="pun">=</span><span class="pln"> temp</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
<p>
	<span></span> 
</p>
<h4>
	<br>
</h4>
<h4>
	out
</h4>
<p>
	out和ref的效果类似，都是属于引用传递。
</p>
<p>
	但是，使用out不能将该参数的值传入方法中：
</p>
<p>
	<br>
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">out</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> age</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//age++;       //会报错：不能使用out参数的原有值</span><span class="pln">
            age </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<br>
</p>
<p>
	所以传入的out参数根本不需要事先被赋值：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">int</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">
            </span><span class="com">//输出参数：传入一个未赋值（赋值也没用）</span><span class="pln">
            grow</span><span class="pun">(</span><span class="kwd">out</span><span class="pln"> age</span><span class="pun">);</span><span class="pln">
            
            </span><span class="com">//在C#的后期版本中可以直接简写为（推荐）：</span><span class="pln">
            </span><span class="com">//grow(out int age);</span></pre>
<p>
	out常用于一个方法需要多个返回的时候（即：获取除了返回值以外的结果），比如类库中的TryParse：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//如果能够Parse，方法返回值为true，input为转换结果</span><span class="pln">
    </span><span class="com">//否则，方法返回值为false，input为默认值0</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">double</span><span class="pun">.</span><span class="typ">TryParse</span><span class="pun">(</span><span class="typ">Console</span><span class="pun">.</span><span class="typ">ReadLine</span><span class="pun">(),</span><span class="pln"> </span><span class="kwd">out</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> input</span><span class="pun">))</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        input </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">else</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"输入错误……"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></pre>
<p>
	<br>
</p>
<p>
	<span style="font-size:16px;"><br>
</span>
</p>
<p>
	<span style="font-size:16px;">常见面试题：ref和out的区别</span><span style="font-size:16px;"></span>
</p>
<ul>
	<li>
		语法：ref参数传入前需要赋值，out参数不需要（也不推荐，赋值也没用）
	</li>
	<li>
		意图：使用ref是为了“改变”传入参数，out是为了“获得”<br>
	</li>
</ul>
<p>
	<strong><br>
</strong>
</p>
<p>
	<span></span><strong>牢记</strong><strong>：</strong><span></span>C<span></span>#中除非方法参数做了标记（ref/out），一律都是值传递！！！
</p>
<p>
	<br>
</p>
<span></span>
<h3>
	<strong>作业</strong>
</h3>
<ol>
	<li>
		利用ref调用Swap()方法交换两个同学的床位号
	</li>
	<li>
		将登陆的过程封装成一个方法LogOn()，调用之后能够获得：<br>
		<ol>
			<li>
				true/false，表示登陆是否成功
			</li>
			<li>
				string，表示登陆失败的原因
			</li>
		</ol>
	</li>
</ol>
    </div>
 