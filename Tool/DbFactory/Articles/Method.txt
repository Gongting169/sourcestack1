
<div class="container body-content">             
<div class="row" style="margin-top:55px">
    <div class="col-md-8">
        
    <img class="img-responsive" style="margin-bottom:20px;" src="/Images/%e6%ba%90%e6%a0%88%e4%b8%8a%e8%af%be%e5%95%a6.jpg">
    <div class="text-primary h2-inline">
        <span class="iconfont icon-article"></span> 方法基础：声明/调用/返回值
    </div>
    <hr>
        <span class="visible-xs-inline visible-sm-inline flag" style="top:60px;">
            <a zyf-show-widget="">              
    <span class="fa fa-window-restore"></span> 更多
            </a>
        </span>
<div>
    <span><small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2019年02月23日 13点22分</span>
    </span>
</small>
</span>
    <span class="pull-right">
        <span zyf-article-arthor="">
            作者：<a href="/Article/User-1">叶飞</a>

        </span>
        <a class="hide" style="margin-left:14px;" href="/Article/Edit/299" data-author-id="1" zyf-article-edit=""><span class="fa fa-pencil-square-o"></span> 修改</a>
    </span>
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <span><span></span></span><span></span><span><span></span></span><strong><span></span></strong> 
<h3>
	为什么需要方法？<br>
</h3>
<p>
	同学们已经通过变量赋值、分支循环完成一些作业了，在这个过程中你有没有发现，有一些代码是“类似”的？比如：
</p>
<ul>
	<li>
		挨个输出数组元素
	</li>
	<li>
		交换两个元素
	</li>
	<li>
		……<br>
	</li>
</ul>
你是如何处理这些类似代码的呢？<span style="font-size:12px;"><br>
</span> 
<p>
	<br>
</p>
<p>
	<span style="font-size:12px;"><img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Summary/2020/3/12/1/复制粘贴.gif" data-original-title="" zyf-img=""></span> 
</p>
<p>
	让我们再次温习这句名言：<span style="font-size:16px;">程序员厌恶复制粘贴！</span> 
</p>
<p>
	我们需要把这些代码<strong>封装</strong>成<strong>函数</strong>，以便于<span></span><strong>重用</strong><span></span>。
</p>
<p>
	<span style="font-size:12px;"></span><span style="font-size:12px;">PS：现阶段我们不区分方法（method）和函数（function）的区别，将两者视为同义词即可。</span> 
</p>
<p>
	<br>
</p>
<h3>
	声明
</h3>
<p>
	又被称之为“定义”。
</p>
<p>
	在class Program{}（<em><strong>不</strong>是Main(){}中</em>）中添加如下代码：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
              </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<span style="font-size:12px;">PS：</span><span style="font-size:12px;">同学们先不要管这个static，直到我告诉大家它是什么之前，所有方法都先加上这个关键字</span> 
</p>
以上就是一个函数的<strong>声明</strong>（declare）了，它包括：
<h4>
	<br>
</h4>
<h4>
	方法签名（signature）
</h4>
<p>
	返回类型：double，也可以是其他类型，比如int、string……具体由开发人员决定
</p>
<p>
	方法名：min，一样由开发人员确定（参考：命名规则）
</p>
<p>
	参数：double[] scores，其中又包括了参数的：
</p>
<ul>
	<li>
		类型：double[]，
	</li>
	<li>
		名字：scores
	</li>
</ul>
<p>
	方法签名定义了方法的
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> find</span><span class="pun">(</span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> array</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> target</span><span class="pun">){}</span></pre>
<p>
	@想一想@：从这个方法签名，我们看出了什么？
</p>
<h4>
	<br>
</h4>
<h4>
	方法体
</h4>
<p>
	方法体由{}界定范围，里面放置方法被<em> 调用 </em>时需要被执行的代码。
</p>
<p>
	其中作为语法点需要关注的是<span></span>：<strong>return</strong> 语句——它决定方法的返回值。
</p>
<p>
	return之后，不要再写任何代码。因为程序执行完成到return语句，就会离开（跳出）方法体，将return后面的值返回给方法调用者。<em>（后文详述）</em> 
</p>
<p>
	C#是强类型语言，返回值的类型必须和方法签名中返回类型一致，比如这样是不行的：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/方法返回类型错误.png" data-original-title="" zyf-img=""> 
</p>
<p>
	<br>
</p>
<h4>
	<br>
</h4>
<h4>
	表达式主体定义<br>
</h4>
<p>
	好吧，我承认，这是一个非常蹩脚的翻译。
</p>
<p>
	简单的来说，如果方法体只有一条return语句的话，从C# 6.0开始，就可以使用新的写法：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">Add</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span></pre>
<p>
	上述语句等于：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">Add</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<span></span><span style="font-size:12px;">PS：这种写法还可以应用于属性、索引器、构造函数等……</span> 
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	调用
</h3>
<p>
	方法声明后，<strong>不</strong>能自动执行，还需要我们调用（call/invoke）。
</p>
<p>
	方法调用的位置和变量一样，现在我们都在Main(){}中进行调用。
</p>
<p>
	<span style="font-size:12px;">PS：和变量一样，方法也必须是“先声明后使用”。但是，这里的“先/后”并不是由</span><em><span style="font-size:12px;"> 代码书写的位置</span></em><span style="font-size:12px;"> 来决定的；只要在调用方法的时候，该方法已经被声明即可。</span> 
</p>
<p>
	<span></span><em>断点演示：</em> 
</p>
<ul>
	<li>
		<em>F11：进入方法体内部（区分：F10），或者在方法体中设断点</em> 
	</li>
	<li>
		<em>F12：转到方法定义 （不一定要debug中）</em> 
	</li>
	<li>
		<em>Ctrl+(Shift)-：可以退到/进到上一次的位置，也非常有用。</em><br>
	</li>
	<li>
		<em>Call Stack窗口：查看方法被谁调用</em><span></span> 
	</li>
</ul>
<p>
	<br>
</p>
<h4>
	先使用再声明
</h4>
<p>
	有时候为了书写方便，我们还可以先直接“调用”方法，然后再利用VS的Show potential fixes功能自动生成方法<br>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/生成方法.png" data-original-title="" zyf-img=""> 
</p>
<p>
	VS的这个功能非常有用！除了可以生成方法，还可以生成类、字段……，添加using、引用……等等，几乎无所不能，超级利器！
</p>
<h4>
	<br>
</h4>
<h4>
	///注释
</h4>
在方法声明的时候，在方法上输入三个斜杠（///），VS就会自动生成方法注释。
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
        </span><span class="com">/// 找到最低分数</span><span class="pln">
        </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="scores"&gt;学生成绩&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="first"&gt;如果有重复，是否取第一个最低分数即可&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;returns&gt;最低分数&lt;/returns&gt;</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
我们可以由此填入：
<ul>
	<li>
		summary：方法的概要说明
	</li>
	<li>
		param：方法参数的说明
	</li>
	<li>
		returns：方法返回值的说明<br>
	</li>
</ul>
<p>
	这样，当我们调用方法的时候，就可以得到VS的智能提示：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/方法的智能提示.png" data-original-title="" zyf-img=""> 
</p>
<h4>
	<br>
</h4>
<h4>
	参数传递
</h4>
<p>
	调用方法的时候，需要给方法传递参数（如果方法声明时要求了参数的话）。
</p>
<p>
	传递参数时，注意匹配方法声明中参数的
</p>
<ul>
	<li>
		个数：方法声明中要求2个参数，你调用时给1个或者3个都是不行的
	</li>
	<li>
		顺序：传递进来的数据，将按次序依次赋值给方法参数，不要搞错了次序（尤其是在参数类型相同的时候）
	</li>
	<li>
		类型：每一个传入的数据类型，必须和方法声明中参数类型一致<br>
	</li>
</ul>
<p>
	<span style="font-size:12px;">PS：有些书籍资料会区分形参（parameter，方法签名里的参数） 和实参（argument，实际传递进来的参数），飞哥个人觉得在早期学习中，不必要过分纠结于这两者的定义</span> 
</p>
<p>
	<br>
</p>
<br>
<h3>
	方法参数
</h3>
<p>
	方法的返回类型和方法名都只能有一个而且必须有一个，但参数不一样：
</p>
<ul>
	<li>
		它可以没有
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
	</li>
	<li>
		也可以有多个，多个参数之间用逗号分隔
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
	</li>
</ul>
<h3>
	<br>
</h3>
<h3>
	方法返回值：return
</h3>
方法体中，return后面跟着的值会“返回给调用者”：<br>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//add(3, 4)的返回值被赋值给变量result</span><span class="pln">
    </span><span class="typ">int</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> add</span><span class="pun">(</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln">

    </span><span class="com">//add(10, 20)的返回值被直接使用</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">add</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">));</span></pre>
<h4>
	<br>
</h4>
<h4>
	void<br>
</h4>
<p>
	如果方法签名中声明的返回类型为 <strong>void</strong>，意味着这个方法<strong>不</strong>返回任何实际性的数据。这时候方法体里可以写一个return;，也可以省略这一行：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> swap</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//return;  可以省略</span><span class="pln">
    </span><span class="pun">}</span></pre>
<strong>@想一想@</strong>：反正可以省略，return; 有什么用呢？
<p>
	<br>
</p>
<p>
	除非方法返回类型设置为void，否则方法体中<em> 至少</em> 会有一条return语句。
</p>
<h4>
	<br>
</h4>
<h4>
	code path<br>
</h4>
<p>
	当方法体中出现 if...else 之类的分支，要确保所有code path（分支）都有return语句。
</p>
<p>
	<br>
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">first</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//报错：if有返回值了，else呢？</span><span class="pln">
        </span><span class="pun">}</span></pre>
而且这是<em> 编译时</em> 审查，你可以理解成“形式”检查。即哪怕这个分支永远永远都不会进入，它也要有一个return语句：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//哪怕i=10,10总是大于5，仍然报错！</span><span class="pln">
        </span><span class="pun">}</span></pre>
<span style="font-size:12px;">PS：如果不是使用变量 i，直接 if(10&gt;5)或者const int i=10，就可以编译通过，因为常量和字面量C#会在<strong>编译时</strong>直接处理，得出10&gt;5永远为true，就不会将其视为一个分支。</span> 
<p>
	<br>
</p>
<h4>
	<br>
</h4>
<h4>
	常见错误
</h4>
<p>
	混淆：
</p>
<ul>
	<li>
		“输出”和“返回”
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> smart</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"小黄真帅"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
	</li>
	<li>
		以为有“多个”返回<br>
	</li>
	<li>
		return 和 break：<br>
		<ul>
			<li>
				return：结束方法的运行<span style="font-size:14px;"></span> 
			</li>
			<li>
				break：仅仅是跳出当前循环
			</li>
		</ul>
<strong>@想一想@</strong>：将这段代码的break替换成return会怎么样？<br>
<pre class="prettyprint lang-cs prettyprinted"><span></span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> seek</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> numbers</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> x</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> numbers</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">numbers</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> x</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    key </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln">
                    </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="com">//return i;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
                </span><span class="com">//else: do nothing</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"finish!"</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> key</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
	</li>
</ul>
<br>
<h4>
	截断式编程
</h4>
<p>
	在方法中，善用return，可以实现“截断式编程”，减少if...else...嵌套。
</p>
<p>
	比如我们之前的<a href="http://17bang.ren/Article/263" target="_blank">成绩归类</a>，封装成方法之后，就可以少一个else：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> showScoreLevel</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> score</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//先处理“非法越界”的情况</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">score </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> score </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">100</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"warning..."</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//else</span><span class="pln">
            </span><span class="com">//{</span><span class="pln">
                </span><span class="com">//注意顺序，想想为什么？</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">score </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">60</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"failed"</span><span class="pun">);</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">

            </span><span class="com">//}</span><span class="pln">
        </span><span class="pun">}</span></pre>
其诀窍在于：将最容易处理最容易得出结果的代码，放在方法体的最上方，让其先直接返回；再处理复杂的“主逻辑”。
<p>
	if 中直接返回了，不需要在额外加上else。
</p>
<h4>
	<br>
</h4>
<h3>
	递归
</h3>
<p>
	在方法体中还可以调用方法自己，这被称之为<strong>递归</strong>（调用）。
</p>
<p>
	C#中通常我们并不鼓励采用这种写法，因为它占用“栈”资源，导致运行效率低，甚至会造成<em>堆栈溢出</em>（Stack Overflow）
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> swap</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            swap</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/堆栈溢出.png" data-original-title="" zyf-img=""> 
<p>
	<br>
</p>
<p>
	<span style="font-size:12px;">PS：早期堆栈溢出的错误非常常见，以至于全球著名的开发问答网站都以此命名：</span><a href="https://stackoverflow.com/" target="_blank" rel="nofollow"><span style="font-size:12px;">https://stackoverflow.com/</span></a><span style="font-size:12px;"> ，</span><span style="font-size:12px;"><br>
</span> 
</p>
<p>
	<span style="font-size:12px;">该网站由ASP.NET开发，而且运行效率极其出色！成功打脸“ASP.NET不能开发大型项目”的说法，^_^</span> 
</p>
<p>
	但有时候，使用递归能够大幅精简代码书写，比如：二分查找，或者查找<span></span>一个文件夹下所有的文件。
</p>
<h4>
	斐波那契数列
</h4>
<p>
	0，1，1，2，3，5，8，13，21，34，55，89，144……依次类推下去。
</p>
<p>
	你会发现，它后一个数等于前面两个数的和。在这个数列中的数字，就被称为斐波那契数。
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getFibonacci</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//终止条件</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">b </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">b</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">int</span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span><span class="pln">
        </span><span class="com">//递归的调用自己</span><span class="pln">
        getFibonacci</span><span class="pun">(</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> sum</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></pre>
<span></span> 
<h3>
	<span></span> 
</h3>
<p>
	<span></span><a href="http://17bang.ren/Article/437" target="_blank">快速排序</a><span></span>：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> quickSort</span><span class="pun">(</span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> array</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">///1.递归终止条件</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&gt;=</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">int</span><span class="pln"> oldLeft </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> oldRight </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">;</span><span class="pln">

            </span><span class="com">//第一轮排序，获得中间值（及其下标）</span><span class="pln">

            </span><span class="com">///第1次交换</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> middle </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">;</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> middleValue </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">left</span><span class="pun">];</span><span class="pln">

            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&lt;</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="com">//从右往左</span><span class="pln">
                </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">right </span><span class="pun">&gt;</span><span class="pln"> middle</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">right</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> middleValue</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">{</span><span class="pln">
                        swap</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> right</span><span class="pun">);</span><span class="pln">
                        middle </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">;</span><span class="pln">
                        </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                    right</span><span class="pun">--;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">

                </span><span class="com">//从左往右</span><span class="pln">
                </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&lt;</span><span class="pln"> middle</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">left</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> middleValue</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">{</span><span class="pln">
                        swap</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> left</span><span class="pun">);</span><span class="pln">
                        middle </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">;</span><span class="pln">
                        </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                    left</span><span class="pun">++;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="com">//左边排序</span><span class="pln">
            quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> oldLeft</span><span class="pun">,</span><span class="pln"> middle </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">

            </span><span class="com">//右边排序</span><span class="pln">
            quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> oldRight</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<br>
</p>
<br>
<h3>
	类库方法
</h3>
<p>
	到目前为止，其实我们已经接触过一下.NET自带的类库方法了：
</p>
<ul>
	<li>
		main()：入口函数，console项目启动后自动调用的函数，一个console项目有且仅能有一个入口函数<br>
	</li>
	<li>
		Console.WriteLine()/ReadLine()<br>
	</li>
	<li>
		Convert.ToXXX （字符串转numeric）和Parse()
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="com">//int fee = (int)"986.87F";</span><span class="pln">
            </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToInt32</span><span class="pun">(</span><span class="str">"986"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">int</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"986"</span><span class="pun">);</span></pre>
	</li>
	<li>
		Math.XXX （四舍五入）
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Ceiling:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Ceiling</span><span class="pun">(</span><span class="lit">19.8</span><span class="pun">));</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Floor:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Floor</span><span class="pun">(</span><span class="lit">19.8</span><span class="pun">));</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Round:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Round</span><span class="pun">(</span><span class="lit">19.875</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span></pre>
	</li>
	<li>
		取随机数
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Random</span><span class="pun">().</span><span class="typ">Next</span><span class="pun">(</span><span class="lit">1000</span><span class="pun">));</span></pre>
	</li>
</ul>
<p>
	<span></span> 
</p>
<p>
	我们可以在方法调用处使用快捷键<span><strong>F12</strong></span>转到定义，比如：<span></span> 
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> value</span><span class="pun">);</span></pre>
<p>
	因为这些方法都是通过已<span></span>编译的dll文件提供的，所以我们只能看到方法的签名（具体原因后文解释）。如果是我们自己写的方法，F12是可以看到方法体的。<span></span> 
</p>
<h3>
	<br>
</h3>
<h3>
	作业
</h3>
<ol>
	<li>
		将之前作业封装成方法（自行思考参数和返回值），并调用执行。且以后作业，如无特别声明，皆需使用方法封装。<br>
	</li>
	<li>
		计算得到源栈同学的平均成绩（精确到两位小数），方法名GetAverage()
	</li>
	<li>
		完成“猜数字”游戏，方法名GuessMe()：<br>
		<ul>
			<li>
				随机生成一个大于0小于1000的整数
			</li>
			<li>
				用户输入一个猜测值，系统进行判断，告知用户猜测的数是“大了”，还是“小了”
			</li>
			<li>
				没猜中可以继续猜，但最多不能超过10次<br>
				<ul>
					<li>
						如果5次之内猜中，输出：你真牛逼！
					</li>
					<li>
						如果8次之内猜中，输出：不错嘛！
					</li>
					<li>
						10次还没猜中，输出：(～￣(OO)￣)ブ<span></span><br>
					</li>
				</ul>
			</li>
		</ul>
<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Attachment/2019/2/21/78601c1b-22de-4394-8221-27c528f749a3.png" data-original-title="" zyf-img=""><br>
	</li>
</ol>
<br>
    </div>
    <div class="clearfix" style="padding-top:10px;">
        <div>
            <label><span class="fa fa-tags"></span>  关键字：</label>
                <span class="badge">C#</span>
                <span class="badge">方法</span>
                <span class="badge">基础</span>
        </div>
        <div class="article-appraise appraise-status pull-right">
            <a class="appraise-status-item text-success" href="/Article/Appraise?id=299&amp;direction=1" data-author-id="1" zyf-vote="">
    <span class="fa fa-thumbs-o-up"></span>
    <span class="visible-sm-inline visible-md-inline visible-lg-inline">赞：</span>
    <span zyf-votes-count="">0</span>
</a>
<a class="appraise-status-item text-muted" href="/Article/Appraise?id=299&amp;direction=-1" data-author-id="1" zyf-vote="">
    <span class="fa fa-thumbs-o-down"></span>
    <span class="visible-sm-inline visible-md-inline visible-lg-inline">踩：</span>
    <span zyf-votes-count="">0</span>
</a>

        </div>
        <div style="padding-bottom:25px;" zyf-article-donate-container="">
    <div style="clear:both;margin-left:auto;margin-right:auto;width:65px;height:65px;">
        <div title="" class="yellow-highlight text-center" data-original-title="点击打赏" data-toggle="tooltip" data-author-id="1" data-article-id="299" zyf-article-donate-btn="">
            <span class="iconfont icon-money credit fa-2x"></span><br>打赏
        </div>
    </div>
    <div class="article-donate">
        <span class="fa fa-smile-o fa-2x text-success pull-left" style="display:table-cell;"></span>
        <div style="display:table-cell;">
            <div>已收到打赏的 
    <a title="" class="credit" href="/FAQ/Money" data-original-title="点击了解" data-toggle="tooltip">
        <span class="iconfont icon-money"></span> 帮帮币
    </a>
 ：</div>
            <div class="clearfix" zyf-problem-donors-container=""><small class="text-info">快来做第一个打赏的好心人吧，O(∩_∩)O~</small></div>
        </div>
        <hr>
        <div class="text-muted" style="clear:both;">
            <span class="fa fa-info-circle"></span>
            你的 <span class="credit">打赏</span> 非常重要！<br>
            为了<a href="/FAQ/Article#grant">保证文章的质量</a>，每一篇文章的发布，都已经消耗了作者 1 枚
    <a title="" class="credit" href="/FAQ/Money" data-original-title="点击了解" data-toggle="tooltip">
        <span class="iconfont icon-money"></span> 帮帮币
    </a>
。<br>
            没有“帮帮币”，作者无法发布新的文章。
        </div>
    </div>
</div>

        <div style="clear:both;">
            <div class="bdsharebuttonbox bdshare-button-style0-16" data-bd-bind="1616220194633"><a class="bds_more" href="#" data-cmd="more"></a><a title="分享到QQ空间" class="bds_qzone" href="#" data-cmd="qzone"></a><a title="分享到新浪微博" class="bds_tsina" href="#" data-cmd="tsina"></a><a title="分享到腾讯微博" class="bds_tqq" href="#" data-cmd="tqq"></a><a title="分享到人人网" class="bds_renren" href="#" data-cmd="renren"></a><a title="分享到微信" class="bds_weixin" href="#" data-cmd="weixin"></a></div>
<script>window._bd_share_config = { "common": { "bdSnsKey": {}, "bdText": "", "bdMini": "2", "bdPic": "", "bdStyle": "0", "bdSize": "16" }, "share": {} }; with (document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = '/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];</script>
        </div>
    </div>

        <div style="margin-top:20px;">
            <div class="yellow-highlight" style="padding:5px 10px;">
    <a title="" style="color:#354756" href="/FAQ/Ad#article" data-original-title="这是什么？" data-toggle="tooltip">投稿人推广：</a> <a href="http://17bang.ren/Article/261">学编程，来 “源栈”！飞哥精品小班等着你……</a>
</div>

        </div>
    <a name="new-comment"></a>
    <div style="padding-top:20px;">
        
<div class="hide yellow-highlight need-login" zyf-not-logon="">
    <span class="fa fa-exclamation-triangle" style="color:yellowgreen;"></span>
    你还没有登录，不能进行相关操作。请<a href="/Log/On?prepage=%2fArticle%2f299">登录</a>或<a href="/Register/Home?prepage=%2fArticle%2f299">注册</a>。
    （<a class="small" href="/Shared/_JoinUs" zyf-why-joinus=""><span class="fa fa-question-circle"></span> 为什么要加入我们</a>）
</div>
        <div zyf-logon="">
            <h4>
                <span class="fa fa-send"></span> <label>我有话说：</label>
            </h4>
            
<script src="/Scripts/kindeditor-v4.1/kindeditor.js"></script>
<script src="/Scripts/kindeditor-v4.1/lang/zh_CN.js"></script>
<script src="/Scripts/kindeditor.help.js"></script>
<form action="/Article/299" method="post" novalidate="novalidate">    <div zyf-comment-reply-reminder=""></div>
<input name="CommentBody.ReplyId" id="CommentBody_ReplyId" type="hidden" value="" zyf-comment-reply-id="" data-val-number="字段 ReplyId 必须是一个数字。" data-val="true"><span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="CommentBody.ReplyId"></span>    <div class="form-group">
        <div class="ke-container ke-container-default" style="width: 100%;"><div class="ke-toolbar" style="display:block;" unselectable="on"><span title="HTML代码" class="ke-outline" unselectable="on" data-name="source"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-source" unselectable="on"></span></span><span class="ke-inline-block ke-separator"></span><span title="段落" class="ke-outline" unselectable="on" data-name="formatblock"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-formatblock" unselectable="on"></span></span><span title="文字大小" class="ke-outline" unselectable="on" data-name="fontsize"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-fontsize" unselectable="on"></span></span><span title="粗体(Ctrl+B)" class="ke-outline" unselectable="on" data-name="bold"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-bold" unselectable="on"></span></span><span title="斜体(Ctrl+I)" class="ke-outline" unselectable="on" data-name="italic"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-italic" unselectable="on"></span></span><span title="下划线(Ctrl+U)" class="ke-outline" unselectable="on" data-name="underline"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-underline" unselectable="on"></span></span><span title="删除线" class="ke-outline" unselectable="on" data-name="strikethrough"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-strikethrough" unselectable="on"></span></span><span title="删除格式" class="ke-outline" unselectable="on" data-name="removeformat"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-removeformat" unselectable="on"></span></span><span class="ke-inline-block ke-separator"></span><span title="表格" class="ke-outline" unselectable="on" data-name="table"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-table" unselectable="on"></span></span><span title="编号" class="ke-outline" unselectable="on" data-name="insertorderedlist"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-insertorderedlist" unselectable="on"></span></span><span title="项目符号" class="ke-outline" unselectable="on" data-name="insertunorderedlist"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-insertunorderedlist" unselectable="on"></span></span><span class="ke-inline-block ke-separator"></span><span title="超级链接" class="ke-outline" unselectable="on" data-name="link"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-link" unselectable="on"></span></span><span title="取消超级链接" class="ke-outline" unselectable="on" data-name="unlink"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-unlink" unselectable="on"></span></span><span class="ke-inline-block ke-separator"></span><span title="插入程序代码" class="ke-outline" unselectable="on" data-name="code"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-code" unselectable="on"></span></span><span title="插入引用" class="ke-outline" unselectable="on" data-name="quote"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-quote" unselectable="on"></span></span><span title="图片" class="ke-outline" unselectable="on" data-name="image"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-image" unselectable="on"></span></span><span class="ke-inline-block ke-separator"></span><span title="全屏显示(Esc)" class="ke-outline" unselectable="on" data-name="fullscreen"><span class="ke-toolbar-icon ke-toolbar-icon-url ke-icon-fullscreen" unselectable="on"></span></span></div><div class="ke-edit" style="height: 100px; display: block;"><iframe tabindex="-32768" class="ke-edit-iframe" frameborder="0" style="width: 100%; height: 100px;" hidefocus="true"></iframe><textarea tabindex="-32768" class="ke-edit-textarea" style="width: 100%; height: 100px; display: none;" hidefocus="true"></textarea></div><div class="ke-statusbar"><span class="ke-inline-block ke-statusbar-center-icon"></span><span class="ke-inline-block ke-statusbar-right-icon"></span></div></div><textarea name="CommentBody.Content" class="form-control" id="CommentBody_Content" style="display: none;" placeholder="精选评论有帮帮币奖励哟！O(∩_∩)O~" rows="4" cols="20" data-val="true" zyf-new-comment="" zyf-kindeditor="" data-val-required="* 正文不能为空"></textarea>
        <span class="field-validation-valid" data-valmsg-replace="true" data-valmsg-for="CommentBody.Content"></span>
    </div>
    <div class="submit" zyf-logon="">
        <input class="btn btn-primary" type="submit" value="提交" zyf-submit-once="" zyf-problem-comment-submit="">
        <input class="btn btn-default" type="reset" value="重置">
    </div>
<div class="hide yellow-highlight need-login" zyf-not-logon="">
    <span class="fa fa-exclamation-triangle" style="color:yellowgreen;"></span>
    你还没有登录，不能进行相关操作。请<a href="/Log/On?prepage=%2fArticle%2f299">登录</a>或<a href="/Register/Home?prepage=%2fArticle%2f299">注册</a>。
    （<a class="small" href="/Shared/_JoinUs" zyf-why-joinus=""><span class="fa fa-question-circle"></span> 为什么要加入我们</a>）
</div></form>
        </div>
    </div>
    <div style="margin-top: 25px;">
        <div class="checkbox pull-left">
            <label>
                <input name="inCategory" id="inCategory" type="checkbox" value="true" zyf-nav-in-category=""><input name="inCategory" type="hidden" value="false">
                在系列 <a href="/Article/Category-68"><span class="fa fa-folder"></span> C#语法</a>
 中的：
            </label>
        </div>
        <a class="btn btn-default btn-sm pull-right" href="/Article/Category-68?fulltext=1&amp;articleId=299">
            <span class="iconfont icon-pages"></span> 全系列阅读
        </a>
        <div style="clear:both; margin-bottom:20px; padding:10px 15px; border: 2px dashed #808080; border-radius:4px 5px;" zyf-article-nav-container="">
    <div>
        <span class="fa fa-arrow-up"></span>
        上一篇：
            <a href="/Article/298">源栈培训：ASP.NET Core：异步async</a>

    </div>
    <div style="margin-top:6px;">
        <span class="fa fa-arrow-down"></span>
        下一篇：
            <a href="/Article/300">哈哈，这个装逼的总结，好好收藏！</a>
    </div>
</div>
    </div>
    <a name="comments"></a>
    <div class="appraise-status" style="clear:both; margin-top: 15px;">
        <span class="lead" style="margin-right:20px">
            <span class="fa fa-comments-o"></span>
            <span class="visible-sm-inline visible-md-inline visible-lg-inline">评论</span><small>
                （ <span title="" data-original-title="精选评论" data-toggle="tooltip" zyf-comment-of-article-count="">0</span> / <span title="" data-original-title="全部评论" data-toggle="tooltip">0</span> ）
            </small>
        </span>
    </div>
    <div zyf-comment-of-article="">
        <div id="published_comment"></div>
        <div zyf-comments-container="">
</div>

    </div>
</div>

    </div>
    <div class="col-md-4 visible-md visible-lg">

<div class="widget clearfix" zyf-widget-content="">
        <h4>
            <span class="fa fa-folder text-primary"></span>
            <a href="/Article/Category-93">后台开发</a>
        </h4>
        <hr>
            <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-61">ADO和EF</a>
            </h4>
            <p>
                如何通过C#进行数据库的读取，包含ADO.NET和Entity Framework相关知识……
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-62">ASP.NET框架</a>
            </h4>
            <p>
                综合之前所学，连接前端和数据库，包括RazorPage、MVC和其他（如WebForm/WebApi等）技术……
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-63">RazorPages（Core）</a>
            </h4>
            <p>
                微软推荐的、最新的、基于Razor页面和.NET core的新一代Web项目开发技术，包括Razor Tag Helper、Model绑定和Validation、Session/Cookie、内置依赖注入等……
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-64">MVC（Framework）</a>
            </h4>
            <p>
                过去两年间最流行的、基于.NET Framework和MVC模式的ASP.NET MVC框架，主要用于讲解安全、性能、架构和各种实战功能演示……
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-68">C#语法</a>
            </h4>
            <p>
                从入门的变量赋值、分支循环、到面向对象，以及更先进的语言特性，如：泛型、Lambda、Linq、异步方法等…………
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-81">Java语法</a>
            </h4>
            <p>
                面向过程的变量赋值、分支循环和函数封装；面向对象的封装、继承和多态；以及更高阶的常用类库（集合/IO/多线程……）、lambda等
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-90">Java Web开发</a>
            </h4>
            <p>
                
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-91">SpringMVC</a>
            </h4>
            <p>
                
            </p>
        </div>
        <div style="margin-bottom:10px; padding-left: 40px;">
            <h4>
                <span class="fa fa-folder text-primary"></span>
                <a href="/Article/Category-101">分层架构和综合实战</a>
            </h4>
            <p>
                
            </p>
        </div>
    <a class="btn pull-right" href="/Article"><span class="fa fa-hand-o-right"></span> 全部</a>
</div>

    <div class="widget clearfix" zyf-widget-content="">
    <div style="font-size:24px;"><span class="fa fa-tags "></span> 关键字</div>
    <hr>
    <div zyf-keyword-widget-content=""><div class="user-tags">
        <a title="" href="/Problem?keyword=163" data-original-title="已使用242次" data-toggle="tooltip" zyf-keyword-widget-id="163">
            <span class="badge" style="font-size:21px; background-color:rgba(51, 51, 51, 0.96875)">
                编程开发语言
            </span>
        </a>
        <a title="" href="/Problem?keyword=169" data-original-title="已使用97次" data-toggle="tooltip" zyf-keyword-widget-id="169">
            <span class="badge" style="font-size:20.5px; background-color:rgba(51, 51, 51, 0.9375)">
                C#
            </span>
        </a>
        <a title="" href="/Problem?keyword=170" data-original-title="已使用71次" data-toggle="tooltip" zyf-keyword-widget-id="170">
            <span class="badge" style="font-size:20px; background-color:rgba(51, 51, 51, 0.90625)">
                JAVA
            </span>
        </a>
        <a title="" href="/Problem?keyword=162" data-original-title="已使用68次" data-toggle="tooltip" zyf-keyword-widget-id="162">
            <span class="badge" style="font-size:19.5px; background-color:rgba(51, 51, 51, 0.875)">
                工具软件
            </span>
        </a>
        <a title="" href="/Problem?keyword=171" data-original-title="已使用55次" data-toggle="tooltip" zyf-keyword-widget-id="171">
            <span class="badge" style="font-size:19px; background-color:rgba(51, 51, 51, 0.84375)">
                Javascript
            </span>
        </a>
        <a title="" href="/Problem?keyword=164" data-original-title="已使用55次" data-toggle="tooltip" zyf-keyword-widget-id="164">
            <span class="badge" style="font-size:18.5px; background-color:rgba(51, 51, 51, 0.8125)">
                顾问咨询
            </span>
        </a>
        <a title="" href="/Problem?keyword=199" data-original-title="已使用32次" data-toggle="tooltip" zyf-keyword-widget-id="199">
            <span class="badge" style="font-size:18px; background-color:rgba(51, 51, 51, 0.78125)">
                html
            </span>
        </a>
        <a title="" href="/Problem?keyword=182" data-original-title="已使用25次" data-toggle="tooltip" zyf-keyword-widget-id="182">
            <span class="badge" style="font-size:17.5px; background-color:rgba(51, 51, 51, 0.75)">
                VisualStudio
            </span>
        </a>
        <a title="" href="/Problem?keyword=161" data-original-title="已使用24次" data-toggle="tooltip" zyf-keyword-widget-id="161">
            <span class="badge" style="font-size:17px; background-color:rgba(51, 51, 51, 0.71875)">
                操作系统
            </span>
        </a>
        <a title="" href="/Problem?keyword=184" data-original-title="已使用19次" data-toggle="tooltip" zyf-keyword-widget-id="184">
            <span class="badge" style="font-size:16.5px; background-color:rgba(51, 51, 51, 0.6875)">
                职场
            </span>
        </a>
        <a title="" href="/Problem?keyword=173" data-original-title="已使用18次" data-toggle="tooltip" zyf-keyword-widget-id="173">
            <span class="badge" style="font-size:16px; background-color:rgba(51, 51, 51, 0.65625)">
                Python
            </span>
        </a>
        <a title="" href="/Problem?keyword=188" data-original-title="已使用18次" data-toggle="tooltip" zyf-keyword-widget-id="188">
            <span class="badge" style="font-size:15.5px; background-color:rgba(51, 51, 51, 0.625)">
                法律
            </span>
        </a>
        <a title="" href="/Problem?keyword=174" data-original-title="已使用18次" data-toggle="tooltip" zyf-keyword-widget-id="174">
            <span class="badge" style="font-size:15px; background-color:rgba(51, 51, 51, 0.59375)">
                SQL
            </span>
        </a>
        <a title="" href="/Problem?keyword=89" data-original-title="已使用14次" data-toggle="tooltip" zyf-keyword-widget-id="89">
            <span class="badge" style="font-size:14.5px; background-color:rgba(51, 51, 51, 0.5625)">
                .net
            </span>
        </a>
        <a title="" href="/Problem?keyword=200" data-original-title="已使用13次" data-toggle="tooltip" zyf-keyword-widget-id="200">
            <span class="badge" style="font-size:14px; background-color:rgba(51, 51, 51, 0.53125)">
                CSS
            </span>
        </a>
        <a title="" href="/Problem?keyword=167" data-original-title="已使用12次" data-toggle="tooltip" zyf-keyword-widget-id="167">
            <span class="badge" style="font-size:13.5px; background-color:rgba(51, 51, 51, 0.5)">
                Linux
            </span>
        </a>
</div></div>
    <hr>
    <div class="row">
        <div class="col-sm-8">
            <div class="input-group">
                <input class="form-control" type="text" placeholder="直接输入关键字查找" zyf-keyword-widget-search-value="">
                <span class="input-group-addon" zyf-keyword-widget-search-btn=""><span class="fa fa-search"></span></span>
            </div>
            
        </div>
        <div class="col-sm-4">
            <a class="btn btn-default" href="" zyf-keyword-widget-another="1">
                <span class="fa fa-random"></span>
                <span style="margin-left:5px;">换一批</span>
            </a>
        </div>
    </div>
</div>
    <div class="clearfix" style="margin-bottom:30px;" zyf-widget-content="">

    <!-- Nav tabs -->
    <ul class="nav nav-tabs nav-justified nav-tabs-colored" role="tablist">
        <li role="presentation">
            <a role="tab" aria-controls="profile" href="#planscan" data-toggle="tab">
                <span class="fa fa-eye"></span> 每日督促
            </a>
        </li>
        <li class="active" role="presentation">
            <a role="tab" aria-controls="messages" style="color:red;" href="#contribute" data-toggle="tab">
                <span class="fa fa-heart"></span> 排行榜
            </a>
        </li>
        <li role="presentation">
            <a role="tab" aria-controls="home" href="#register" data-toggle="tab">
                <span class="fa fa-user-circle-o"></span> 新注册
            </a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane" id="planscan" role="tabpanel"><table class="table-none-border">
        <tbody>
            <tr>
                <td style="font-size:18px" colspan="2"><span class="fa fa-calendar-check-o fa-fw"></span> 2021年03月19日</td>
            </tr>
            <tr>
                <th>共扫描目标：</th>
                <td><span class="fa fa-flag-o fa-fw"></span> 8 个</td>
            </tr>
            <tr>
                <th>当天休息：</th>
                <td><span class="fa fa-ban fa-fw text-muted"></span> 6 人</td>
            </tr>
            <tr>
                <th>已交作业：</th>
                <td><span class="fa fa-check text-success fa-fw"></span> 0 份</td>
            </tr>
            <tr>
                <th>请假：</th>
                <td><span class="fa fa-coffee fa-fw"></span>  0 人</td>
            </tr>
            <tr>
                <th>未交作业：</th>
                <td><a zyf-task-not-complete=""><span class="fa fa-remove fa-fw"></span> 2 人</a></td>
            </tr>
            
        </tbody>
    </table></div>
        <div class="tab-pane active" id="contribute" role="tabpanel">
            <table class="table-none-border order-list">
    <tbody>

<tr zyf-user-most-order="1">
    <td style="width: 40px;"><span class="order-tag item-1">1</span></td>
    <td>
        

<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4550" zyf-show-contact="4550">
        unkownn
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="中级学徒" data-toggle="tooltip">
    <span>②</span>
</a>
    </td>
    <td>44</td>
</tr>
<tr zyf-user-most-order="2">
    <td style="width: 40px;"><span class="order-tag item-2">2</span></td>
    <td>        
<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4548" zyf-show-contact="4548">
        Edwin521
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="初级学徒" data-toggle="tooltip">
    <span>①</span>
</a>
    </td>
    <td>30</td>
</tr>
<tr zyf-user-most-order="3">
    <td style="width: 40px;"><span class="order-tag item-3">3</span></td>
    <td>
        

<span title="" data-original-title="捐赠 5" data-toggle="tooltip">
    <a style="color:#DCB962" href="/User/1" zyf-show-contact="1">
        叶飞
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="大宗师" data-toggle="tooltip">
    <span>⑩</span>
</a>
    </td>
    <td>28</td>
</tr>
<tr zyf-user-most-order="4">
    <td style="width: 40px;"><span class="order-tag item">4</span></td>
    <td>       
<span title="" data-original-title="捐赠 1015.5" data-toggle="tooltip">
    <a style="color:#DCB962" href="/User/18" zyf-show-contact="18">
        dk
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="初级教师" data-toggle="tooltip">
    <span>④</span>
</a>
    </td>
    <td>21</td>
</tr>
<tr zyf-user-most-order="5">
    <td style="width: 40px;"><span class="order-tag item">5</span></td>
    <td>        
<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4549" zyf-show-contact="4549">
        Gabriel 
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="初级学徒" data-toggle="tooltip">
    <span>①</span>
</a>
    </td>
    <td>11</td>
</tr>
<tr zyf-user-most-order="6">
    <td style="width: 40px;"><span class="order-tag item">6</span></td>
    <td>        
<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4551" zyf-show-contact="4551">
        忠哲
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="初级学徒" data-toggle="tooltip">
    <span>①</span>
</a>
    </td>
    <td>10</td>
</tr>
<tr zyf-user-most-order="7">
    <td style="width: 40px;"><span class="order-tag item">7</span></td>
    <td>
        

<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4506" zyf-show-contact="4506">
        pi31415
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="中级学徒" data-toggle="tooltip">
    <span>②</span>
</a>
    </td>
    <td>2</td>
</tr>
<tr zyf-user-most-order="8">
    <td style="width: 40px;"><span class="order-tag item">8</span></td>
    <td>        
<span title="" data-original-title="" data-toggle="tooltip">
    <a style="color:" href="/User/4531" zyf-show-contact="4531">
        uao
    </a>
</span>
<a title="" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-original-title="初级学徒" data-toggle="tooltip">
    <span>①</span>
</a>
    </td>
    <td>2</td>
</tr>    </tbody>
</table>
            <div class="clearfix" style="padding-top:10px;" zyf-user-widget-most-contribute="">
                <a class="btn pull-right" href="/User/MyMost?on=Contribute">
                    <span class="fa fa-hand-o-right"></span> 我的排名
                </a>
            </div>
        </div>
        <div class="tab-pane" id="register" role="tabpanel">    <div style="margin-bottom:10px;">
        <small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2021年03月15日 16点45分</span>
    </span>
</small>
        <div>            
<span title="" data-toggle="tooltip">
    <a style="color:" href="/User/4551" zyf-show-contact="4551">
        忠哲
    </a>
</span>
<a title="初级学徒" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-toggle="tooltip">
    <span>①</span>
</a>
<span></span>
<span></span>
        </div>
    </div>
    <div style="margin-bottom:10px;">
        <small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2021年03月15日 11点51分</span>
    </span>
</small>
        <div>           
<span title="" data-toggle="tooltip">
    <a style="color:" href="/User/4550" zyf-show-contact="4550">
        unkownn
    </a>
</span>
<a title="中级学徒" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-toggle="tooltip">
    <span>②</span>
</a>
<span></span>
<span></span>
        </div>
    </div>
    <div style="margin-bottom:10px;">
        <small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2021年03月15日 08点59分</span>
    </span>
</small>
        <div>            
<span title="" data-toggle="tooltip">
    <a style="color:" href="/User/4549" zyf-show-contact="4549">
        Gabriel 
    </a>
</span>
<a title="初级学徒" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-toggle="tooltip">
    <span>①</span>
</a>
<span></span>
<span></span>
        </div>
    </div>
    <div style="margin-bottom:10px;">
        <small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2021年03月13日 19点29分</span>
    </span>
</small>
        <div>            
<span title="" data-toggle="tooltip">
    <a style="color:" href="/User/4548" zyf-show-contact="4548">
        Edwin521
    </a>
</span>
<a title="初级学徒" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-toggle="tooltip">
    <span>①</span>
</a>
<span></span>
<span></span>
        </div>
    </div>
    <div style="margin-bottom:10px;">
        <small class="text-muted" zyf-datetime="">
    <span>
        <span class="fa fa-calendar"></span> <span zyf-can-hide=""> 2021年03月08日 08点36分</span>
    </span>
</small>
        <div>            
<span title="" data-toggle="tooltip">
    <a style="color:" href="/User/4547" zyf-show-contact="4547">
        和光同尘
    </a>
</span>
<a title="中级学徒" class="text-muted" style="position:relative; top:-1px;" href="/FAQ/Credit#" data-toggle="tooltip">
    <span>②</span>
</a>
<span></span>
<span></span>
        </div>
    </div>
<div class="clearfix">
    <a class="btn pull-right" href="/User/Index"><span class="fa fa-hand-o-right"></span> 更多</a>
</div></div>
    </div>

</div>
    <div class="widget clearfix" zyf-widget-content="">
        <div class="ad-in-widget order-list">
            <span class="item-1 order-tag">1</span>
                <a href="/AdInWidget/_Free?position=1" zyf-adinwidget-free="">免费广告位，抢到就是赚到！</a>
        </div>
        <div class="ad-in-widget order-list">
            <span class="item-2 order-tag">2</span>
                <a href="/AdInWidget/_Free?position=2" zyf-adinwidget-free="">免费广告位，抢到就是赚到！</a>
        </div>
        <div class="ad-in-widget order-list">
            <span class="item-3 order-tag">3</span>
                <a href="/AdInWidget/_Free?position=3" zyf-adinwidget-free="">免费广告位，抢到就是赚到！</a>
        </div>
        <div class="ad-in-widget order-list">
            <span class="item order-tag">4</span>
                <a href="/AdInWidget/_Free?position=4" zyf-adinwidget-free="">免费广告位，抢到就是赚到！</a>
        </div>
        <div class="ad-in-widget order-list">
            <span class="item order-tag">5</span>
                <a href="/AdInWidget/_Free?position=5" zyf-adinwidget-free="">免费广告位，抢到就是赚到！</a>
        </div>
    <div class="ad-in-widget order-list">
        <span class="item order-tag">6</span> 本站主机由<a href="http://www.west.cn/index.asp?ReferenceID=563969">西部数码</a>提供
    </div>
    <a class="pull-right text-muted" href="/AdInWidget/Write">
        <small zyf-ad-in-widget-remind="">
            <span class="fa fa-buysellads"></span> 广告
            <span class="hide" zyf-ad-in-widget-remind-suffix="">，你也可以发布哟！</span>
        </small>
    </a>
</div>
    <div tabindex="-1" class="modal fade" role="dialog" zyf-adinwidget-free-modal="">
    </div><!-- /.modal -->
        <a class="feedback flag text-center" style="right: 63px; bottom: 132px;" href="/Contact/Us" zyf-global-feedback="">
   <span class="fa fa-question-circle-o"></span><br>帮助
</a>
<a class="feedback flag text-center" style="right: 63px; bottom: 80px;" href="/Suggest/New" zyf-global-feedback="">
    <span class="fa fa-comments-o"></span><br>反馈
</a>
        <hr>
        <footer>
            <div>
                <a href="/About/Us">关于我们</a> |
                <a href="/Code">源栈课堂</a> |
                <a href="/FAQ">常见问题</a> |
                <a href="/Suggest">意见建议</a> |
                <a href="/Notice">历史通知</a> |
                <a class="text-success" href="/Donate">友情捐赠</a> |
                <a class="text-info" href="/About/Partner">诚邀合伙人</a>
            </div>
            <p class="pull-right"><a href="http://www.miitbeian.gov.cn">渝ICP备18007191号（备案）</a>© 2021 - 自由<img src="/Images/freeflying.ico"></p>
        </footer>
    </div>