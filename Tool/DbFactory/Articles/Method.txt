
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <span><span></span></span><span></span><span><span></span></span><strong><span></span></strong> 
<h3>
	为什么需要方法？<br>
</h3>
<p>
	同学们已经通过变量赋值、分支循环完成一些作业了，在这个过程中你有没有发现，有一些代码是“类似”的？比如：
</p>
<ul>
	<li>
		挨个输出数组元素
	</li>
	<li>
		交换两个元素
	</li>
	<li>
		……<br>
	</li>
</ul>
你是如何处理这些类似代码的呢？<span style="font-size:12px;"><br>
</span> 
<p>
	<br>
</p>
<p>
	<span style="font-size:12px;"><img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Summary/2020/3/12/1/复制粘贴.gif" data-original-title="" zyf-img=""></span> 
</p>
<p>
	让我们再次温习这句名言：<span style="font-size:16px;">程序员厌恶复制粘贴！</span> 
</p>
<p>
	我们需要把这些代码<strong>封装</strong>成<strong>函数</strong>，以便于<span></span><strong>重用</strong><span></span>。
</p>
<p>
	<span style="font-size:12px;"></span><span style="font-size:12px;">PS：现阶段我们不区分方法（method）和函数（function）的区别，将两者视为同义词即可。</span> 
</p>
<p>
	<br>
</p>
<h3>
	声明
</h3>
<p>
	又被称之为“定义”。
</p>
<p>
	在class Program{}（<em><strong>不</strong>是Main(){}中</em>）中添加如下代码：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
              </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<span style="font-size:12px;">PS：</span><span style="font-size:12px;">同学们先不要管这个static，直到我告诉大家它是什么之前，所有方法都先加上这个关键字</span> 
</p>
以上就是一个函数的<strong>声明</strong>（declare）了，它包括：
<h4>
	<br>
</h4>
<h4>
	方法签名（signature）
</h4>
<p>
	返回类型：double，也可以是其他类型，比如int、string……具体由开发人员决定
</p>
<p>
	方法名：min，一样由开发人员确定（参考：命名规则）
</p>
<p>
	参数：double[] scores，其中又包括了参数的：
</p>
<ul>
	<li>
		类型：double[]，
	</li>
	<li>
		名字：scores
	</li>
</ul>
<p>
	方法签名定义了方法的
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> find</span><span class="pun">(</span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> array</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> target</span><span class="pun">){}</span></pre>
<p>
	@想一想@：从这个方法签名，我们看出了什么？
</p>
<h4>
	<br>
</h4>
<h4>
	方法体
</h4>
<p>
	方法体由{}界定范围，里面放置方法被<em> 调用 </em>时需要被执行的代码。
</p>
<p>
	其中作为语法点需要关注的是<span></span>：<strong>return</strong> 语句——它决定方法的返回值。
</p>
<p>
	return之后，不要再写任何代码。因为程序执行完成到return语句，就会离开（跳出）方法体，将return后面的值返回给方法调用者。<em>（后文详述）</em> 
</p>
<p>
	C#是强类型语言，返回值的类型必须和方法签名中返回类型一致，比如这样是不行的：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/方法返回类型错误.png" data-original-title="" zyf-img=""> 
</p>
<p>
	<br>
</p>
<h4>
	<br>
</h4>
<h4>
	表达式主体定义<br>
</h4>
<p>
	好吧，我承认，这是一个非常蹩脚的翻译。
</p>
<p>
	简单的来说，如果方法体只有一条return语句的话，从C# 6.0开始，就可以使用新的写法：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">Add</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span></pre>
<p>
	上述语句等于：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> </span><span class="typ">Add</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></pre>
<span></span><span style="font-size:12px;">PS：这种写法还可以应用于属性、索引器、构造函数等……</span> 
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	调用
</h3>
<p>
	方法声明后，<strong>不</strong>能自动执行，还需要我们调用（call/invoke）。
</p>
<p>
	方法调用的位置和变量一样，现在我们都在Main(){}中进行调用。
</p>
<p>
	<span style="font-size:12px;">PS：和变量一样，方法也必须是“先声明后使用”。但是，这里的“先/后”并不是由</span><em><span style="font-size:12px;"> 代码书写的位置</span></em><span style="font-size:12px;"> 来决定的；只要在调用方法的时候，该方法已经被声明即可。</span> 
</p>
<p>
	<span></span><em>断点演示：</em> 
</p>
<ul>
	<li>
		<em>F11：进入方法体内部（区分：F10），或者在方法体中设断点</em> 
	</li>
	<li>
		<em>F12：转到方法定义 （不一定要debug中）</em> 
	</li>
	<li>
		<em>Ctrl+(Shift)-：可以退到/进到上一次的位置，也非常有用。</em><br>
	</li>
	<li>
		<em>Call Stack窗口：查看方法被谁调用</em><span></span> 
	</li>
</ul>
<p>
	<br>
</p>
<h4>
	先使用再声明
</h4>
<p>
	有时候为了书写方便，我们还可以先直接“调用”方法，然后再利用VS的Show potential fixes功能自动生成方法<br>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/生成方法.png" data-original-title="" zyf-img=""> 
</p>
<p>
	VS的这个功能非常有用！除了可以生成方法，还可以生成类、字段……，添加using、引用……等等，几乎无所不能，超级利器！
</p>
<h4>
	<br>
</h4>
<h4>
	///注释
</h4>
在方法声明的时候，在方法上输入三个斜杠（///），VS就会自动生成方法注释。
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="com">/// &lt;summary&gt;</span><span class="pln">
        </span><span class="com">/// 找到最低分数</span><span class="pln">
        </span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="scores"&gt;学生成绩&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;param name="first"&gt;如果有重复，是否取第一个最低分数即可&lt;/param&gt;</span><span class="pln">
        </span><span class="com">/// &lt;returns&gt;最低分数&lt;/returns&gt;</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
我们可以由此填入：
<ul>
	<li>
		summary：方法的概要说明
	</li>
	<li>
		param：方法参数的说明
	</li>
	<li>
		returns：方法返回值的说明<br>
	</li>
</ul>
<p>
	这样，当我们调用方法的时候，就可以得到VS的智能提示：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/方法的智能提示.png" data-original-title="" zyf-img=""> 
</p>
<h4>
	<br>
</h4>
<h4>
	参数传递
</h4>
<p>
	调用方法的时候，需要给方法传递参数（如果方法声明时要求了参数的话）。
</p>
<p>
	传递参数时，注意匹配方法声明中参数的
</p>
<ul>
	<li>
		个数：方法声明中要求2个参数，你调用时给1个或者3个都是不行的
	</li>
	<li>
		顺序：传递进来的数据，将按次序依次赋值给方法参数，不要搞错了次序（尤其是在参数类型相同的时候）
	</li>
	<li>
		类型：每一个传入的数据类型，必须和方法声明中参数类型一致<br>
	</li>
</ul>
<p>
	<span style="font-size:12px;">PS：有些书籍资料会区分形参（parameter，方法签名里的参数） 和实参（argument，实际传递进来的参数），飞哥个人觉得在早期学习中，不必要过分纠结于这两者的定义</span> 
</p>
<p>
	<br>
</p>
<br>
<h3>
	方法参数
</h3>
<p>
	方法的返回类型和方法名都只能有一个而且必须有一个，但参数不一样：
</p>
<ul>
	<li>
		它可以没有
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">()</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
	</li>
	<li>
		也可以有多个，多个参数之间用逗号分隔
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span></pre>
	</li>
</ul>
<h3>
	<br>
</h3>
<h3>
	方法返回值：return
</h3>
方法体中，return后面跟着的值会“返回给调用者”：<br>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//add(3, 4)的返回值被赋值给变量result</span><span class="pln">
    </span><span class="typ">int</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> add</span><span class="pun">(</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln">

    </span><span class="com">//add(10, 20)的返回值被直接使用</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">add</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="lit">20</span><span class="pun">));</span></pre>
<h4>
	<br>
</h4>
<h4>
	void<br>
</h4>
<p>
	如果方法签名中声明的返回类型为 <strong>void</strong>，意味着这个方法<strong>不</strong>返回任何实际性的数据。这时候方法体里可以写一个return;，也可以省略这一行：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> swap</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//return;  可以省略</span><span class="pln">
    </span><span class="pun">}</span></pre>
<strong>@想一想@</strong>：反正可以省略，return; 有什么用呢？
<p>
	<br>
</p>
<p>
	除非方法返回类型设置为void，否则方法体中<em> 至少</em> 会有一条return语句。
</p>
<h4>
	<br>
</h4>
<h4>
	code path<br>
</h4>
<p>
	当方法体中出现 if...else 之类的分支，要确保所有code path（分支）都有return语句。
</p>
<p>
	<br>
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">first</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//报错：if有返回值了，else呢？</span><span class="pln">
        </span><span class="pun">}</span></pre>
而且这是<em> 编译时</em> 审查，你可以理解成“形式”检查。即哪怕这个分支永远永远都不会进入，它也要有一个return语句：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> scores</span><span class="pun">,</span><span class="pln"> bool first</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//哪怕i=10,10总是大于5，仍然报错！</span><span class="pln">
        </span><span class="pun">}</span></pre>
<span style="font-size:12px;">PS：如果不是使用变量 i，直接 if(10&gt;5)或者const int i=10，就可以编译通过，因为常量和字面量C#会在<strong>编译时</strong>直接处理，得出10&gt;5永远为true，就不会将其视为一个分支。</span> 
<p>
	<br>
</p>
<h4>
	<br>
</h4>
<h4>
	常见错误
</h4>
<p>
	混淆：
</p>
<ul>
	<li>
		“输出”和“返回”
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> smart</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"小黄真帅"</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
	</li>
	<li>
		以为有“多个”返回<br>
	</li>
	<li>
		return 和 break：<br>
		<ul>
			<li>
				return：结束方法的运行<span style="font-size:14px;"></span> 
			</li>
			<li>
				break：仅仅是跳出当前循环
			</li>
		</ul>
<strong>@想一想@</strong>：将这段代码的break替换成return会怎么样？<br>
<pre class="prettyprint lang-cs prettyprinted"><span></span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> seek</span><span class="pun">(</span><span class="kwd">double</span><span class="pun">[]</span><span class="pln"> numbers</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">double</span><span class="pln"> x</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> numbers</span><span class="pun">.</span><span class="typ">Length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">numbers</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> x</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    key </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln">
                    </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="com">//return i;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
                </span><span class="com">//else: do nothing</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"finish!"</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> key</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span></pre>
	</li>
</ul>
<br>
<h4>
	截断式编程
</h4>
<p>
	在方法中，善用return，可以实现“截断式编程”，减少if...else...嵌套。
</p>
<p>
	比如我们之前的<a href="http://17bang.ren/Article/263" target="_blank">成绩归类</a>，封装成方法之后，就可以少一个else：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> showScoreLevel</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> score</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">//先处理“非法越界”的情况</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">score </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> score </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">100</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"warning..."</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="com">//else</span><span class="pln">
            </span><span class="com">//{</span><span class="pln">
                </span><span class="com">//注意顺序，想想为什么？</span><span class="pln">
                </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">score </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">60</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"failed"</span><span class="pun">);</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">

            </span><span class="com">//}</span><span class="pln">
        </span><span class="pun">}</span></pre>
其诀窍在于：将最容易处理最容易得出结果的代码，放在方法体的最上方，让其先直接返回；再处理复杂的“主逻辑”。
<p>
	if 中直接返回了，不需要在额外加上else。
</p>
<h4>
	<br>
</h4>
<h3>
	递归
</h3>
<p>
	在方法体中还可以调用方法自己，这被称之为<strong>递归</strong>（调用）。
</p>
<p>
	C#中通常我们并不鼓励采用这种写法，因为它占用“栈”资源，导致运行效率低，甚至会造成<em>堆栈溢出</em>（Stack Overflow）
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> swap</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            swap</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/12/1/堆栈溢出.png" data-original-title="" zyf-img=""> 
<p>
	<br>
</p>
<p>
	<span style="font-size:12px;">PS：早期堆栈溢出的错误非常常见，以至于全球著名的开发问答网站都以此命名：</span><a href="https://stackoverflow.com/" target="_blank" rel="nofollow"><span style="font-size:12px;">https://stackoverflow.com/</span></a><span style="font-size:12px;"> ，</span><span style="font-size:12px;"><br>
</span> 
</p>
<p>
	<span style="font-size:12px;">该网站由ASP.NET开发，而且运行效率极其出色！成功打脸“ASP.NET不能开发大型项目”的说法，^_^</span> 
</p>
<p>
	但有时候，使用递归能够大幅精简代码书写，比如：二分查找，或者查找<span></span>一个文件夹下所有的文件。
</p>
<h4>
	斐波那契数列
</h4>
<p>
	0，1，1，2，3，5，8，13，21，34，55，89，144……依次类推下去。
</p>
<p>
	你会发现，它后一个数等于前面两个数的和。在这个数列中的数字，就被称为斐波那契数。
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getFibonacci</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> b</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="com">//终止条件</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">b </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">b</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">int</span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> b</span><span class="pun">;</span><span class="pln">
        </span><span class="com">//递归的调用自己</span><span class="pln">
        getFibonacci</span><span class="pun">(</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> sum</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span></pre>
<span></span> 
<h3>
	<span></span> 
</h3>
<p>
	<span></span><a href="http://17bang.ren/Article/437" target="_blank">快速排序</a><span></span>：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> quickSort</span><span class="pun">(</span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> array</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="com">///1.递归终止条件</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&gt;=</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">int</span><span class="pln"> oldLeft </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">,</span><span class="pln"> oldRight </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">;</span><span class="pln">

            </span><span class="com">//第一轮排序，获得中间值（及其下标）</span><span class="pln">

            </span><span class="com">///第1次交换</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> middle </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">;</span><span class="pln">
            </span><span class="typ">int</span><span class="pln"> middleValue </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">left</span><span class="pun">];</span><span class="pln">

            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&lt;</span><span class="pln"> right</span><span class="pun">)</span><span class="pln">
            </span><span class="pun">{</span><span class="pln">
                </span><span class="com">//从右往左</span><span class="pln">
                </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">right </span><span class="pun">&gt;</span><span class="pln"> middle</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">right</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> middleValue</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">{</span><span class="pln">
                        swap</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> right</span><span class="pun">);</span><span class="pln">
                        middle </span><span class="pun">=</span><span class="pln"> right</span><span class="pun">;</span><span class="pln">
                        </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                    right</span><span class="pun">--;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">

                </span><span class="com">//从左往右</span><span class="pln">
                </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">left </span><span class="pun">&lt;</span><span class="pln"> middle</span><span class="pun">)</span><span class="pln">
                </span><span class="pun">{</span><span class="pln">
                    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">array</span><span class="pun">[</span><span class="pln">left</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> middleValue</span><span class="pun">)</span><span class="pln">
                    </span><span class="pun">{</span><span class="pln">
                        swap</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle</span><span class="pun">,</span><span class="pln"> left</span><span class="pun">);</span><span class="pln">
                        middle </span><span class="pun">=</span><span class="pln"> left</span><span class="pun">;</span><span class="pln">
                        </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
                    left</span><span class="pun">++;</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="com">//左边排序</span><span class="pln">
            quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> oldLeft</span><span class="pun">,</span><span class="pln"> middle </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">

            </span><span class="com">//右边排序</span><span class="pln">
            quickSort</span><span class="pun">(</span><span class="pln">array</span><span class="pun">,</span><span class="pln"> middle </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> oldRight</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<br>
</p>
<br>
<h3>
	类库方法
</h3>
<p>
	到目前为止，其实我们已经接触过一下.NET自带的类库方法了：
</p>
<ul>
	<li>
		main()：入口函数，console项目启动后自动调用的函数，一个console项目有且仅能有一个入口函数<br>
	</li>
	<li>
		Console.WriteLine()/ReadLine()<br>
	</li>
	<li>
		Convert.ToXXX （字符串转numeric）和Parse()
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="com">//int fee = (int)"986.87F";</span><span class="pln">
            </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToInt32</span><span class="pun">(</span><span class="str">"986"</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">int</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="str">"986"</span><span class="pun">);</span></pre>
	</li>
	<li>
		Math.XXX （四舍五入）
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Ceiling:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Ceiling</span><span class="pun">(</span><span class="lit">19.8</span><span class="pun">));</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Floor:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Floor</span><span class="pun">(</span><span class="lit">19.8</span><span class="pun">));</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Round:"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Round</span><span class="pun">(</span><span class="lit">19.875</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span></pre>
	</li>
	<li>
		取随机数
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Random</span><span class="pun">().</span><span class="typ">Next</span><span class="pun">(</span><span class="lit">1000</span><span class="pun">));</span></pre>
	</li>
</ul>
<p>
	<span></span> 
</p>
<p>
	我们可以在方法调用处使用快捷键<span><strong>F12</strong></span>转到定义，比如：<span></span> 
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> value</span><span class="pun">);</span></pre>
<p>
	因为这些方法都是通过已<span></span>编译的dll文件提供的，所以我们只能看到方法的签名（具体原因后文解释）。如果是我们自己写的方法，F12是可以看到方法体的。<span></span> 
</p>
<h3>
	<br>
</h3>
<h3>
	作业
</h3>
<ol>
	<li>
		将之前作业封装成方法（自行思考参数和返回值），并调用执行。且以后作业，如无特别声明，皆需使用方法封装。<br>
	</li>
	<li>
		计算得到源栈同学的平均成绩（精确到两位小数），方法名GetAverage()
	</li>
	<li>
		完成“猜数字”游戏，方法名GuessMe()：<br>
		<ul>
			<li>
				随机生成一个大于0小于1000的整数
			</li>
			<li>
				用户输入一个猜测值，系统进行判断，告知用户猜测的数是“大了”，还是“小了”
			</li>
			<li>
				没猜中可以继续猜，但最多不能超过10次<br>
				<ul>
					<li>
						如果5次之内猜中，输出：你真牛逼！
					</li>
					<li>
						如果8次之内猜中，输出：不错嘛！
					</li>
					<li>
						10次还没猜中，输出：(～￣(OO)￣)ブ<span></span><br>
					</li>
				</ul>
			</li>
		</ul>
<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Attachment/2019/2/21/78601c1b-22de-4394-8221-27c528f749a3.png" data-original-title="" zyf-img=""><br>
	</li>
</ol>
<br>
    </div>
   