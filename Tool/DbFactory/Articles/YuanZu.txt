
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <p>
	<span></span>
</p>
<p>
	<strong>返回</strong> 
</p>
<p>
	<br>
</p>
<p>
	当我们需要返回多个数据时：
</p>
<ul>
	<li>
		ref/out：还是不能太多
	</li>
	<li>
		数组：只能是同一类型<br>
	</li>
</ul>
元组（元素组合？tuple）：
<ul>
	<li>
		命名：（old: 38, name: "feige"）
	</li>
	<li>
		匿名：（38，"fegei"）
	</li>
</ul>
<p>
	Tuple的赋值和取值演示
</p>
<p>
	没有具体类型，只能用var
</p>
<p>
	<br>
</p>
<p>
	通过函数的（多个）参数和（多个）返回值理解：把某些数据“装到一起”的需要
</p>
<br>
<p>
	<br>
</p>
<p>
	<strong>元组（<strong>Tuple</strong>）</strong> 
</p>
<p>
	最简单的数据封装，和数组不同，它可以封装不同的数据类型
</p>
<p>
	即可作为方法的参数，
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="com">//static void  enter(var student)    不能使用var，没有任何线索，无法推断</span><span class="pln">
        </span><span class="com">//static void  enter((int, string, bool) student)</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln">  enter</span><span class="pun">((</span><span class="typ">int</span><span class="pln"> height</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> bool gender</span><span class="pun">)</span><span class="pln"> student</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">student</span><span class="pun">.</span><span class="pln">name</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	也可以作为方法的返回值：(int, string)
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">,</span><span class="kwd">string</span><span class="pun">,</span><span class="pln">bool</span><span class="pun">)</span><span class="pln"> enter</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> term</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="lit">175</span><span class="pun">,</span><span class="pln"> </span><span class="str">"jimmy"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span></pre>
<p>
	<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Summary/2019/11/14/1/tuple.png" data-original-title="" zyf-img="">还可以命名：&nbsp;(int age, string name)
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> height</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> bool gender</span><span class="pun">)</span><span class="pln"> getBest</span><span class="pun">()</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="lit">175</span><span class="pun">,</span><span class="pln"> </span><span class="str">"jimmy"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

  &nbsp;&nbsp;&nbsp;    </span><span class="kwd">var</span><span class="pln"> student </span><span class="pun">=</span><span class="pln"> getBest</span><span class="pun">();</span><span class="pln">

            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">student</span><span class="pun">.</span><span class="pln">height</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">student</span><span class="pun">.</span><span class="pln">name</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">student</span><span class="pun">.</span><span class="pln">gender</span><span class="pun">);</span></pre>
<p>
	<br>
</p>
<p>
	------------------------------------------------
</p>
<p>
	<strong>作业</strong>：
</p>
<ol>
	<li>
		使用tuple作为参数，重构SelfIntroduction()方法，输出自我介绍
	</li>
	<li>
		实现方法：
		<ul>
			<li>
				IndexOf()，通过遍历在无序数组中<br>
			</li>
			<li>
				BinarySearch()，通过二分查找法在一个有序数组中
			</li>
		</ul>
找到某个值的下标，找不到返回-1
	</li>
</ol>
<p>
	------------------------------------------------
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
<p>
	引出：结构（struct）和类（class），以及为什么需要他们？
</p>
<p>
	最基本层次的理解：简单/基本类型不足以满足业务需求，需要一种更复杂更多元化的数据结构（容器）
</p>
<p>
	<br>
</p>
<p>
	元组和函数，其实都是一种封装。但这种程度的封装，还远远不够，于是有了之后的：<a href="http://17bang.ren/Article/434">【总结/作业】源栈培训：C#语法基础-面向对象</a>。
</p>
<p>
	<br>
</p>
    </div>
 