
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <h3>
	<span></span>重载（overload）
</h3>
<p>
	<br>
</p>
<p>
	引入：两个数相加，三个数相加，四个数相加……
</p>
<p>
	<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Attachment/2019/2/24/f864bfeb-afd2-4177-87b1-7a9a8db45b33.png" data-original-title="" zyf-img=""> 
</p>
<p>
	可以使用同一个方法名，配以不同的参数“组合”（个数/类型/次序/传递方式ref）。但注意：
</p>
<ul>
	<li>
		仅是参数名不同
	</li>
	<li>
		仅是返回值不同<br>
	</li>
</ul>
<p>
	不能认为是方法的重载。
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(){}</span><span class="pln">
        </span><span class="com">//static int grow(){return -1;}         //不能通过返回类型区分</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> age</span><span class="pun">){}</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">){}</span><span class="pln">
        </span><span class="com">//static void grow(string sname) { }    //不能通过参数名区分</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> age</span><span class="pun">){}</span><span class="pln">
        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> age</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">){}</span></pre>
<p>
	<br>
</p>
<h3>
	可选（optional）参数
</h3>
<p>
	生活场景：“老程，帮我买瓶水”
</p>
<ul>
	<li>
		默认500ml瓶装矿泉水，不需要每次都说；
	</li>
	<li>
		但有时候想换个口味或者其他原因，需要的是380ml矿泉水或者大罐装肥宅快乐水<br>
	</li>
</ul>
<p>
	开发中的例子：生成一个随机数组，默认：10个元素，以0开头，元素值最大间距5以内。
</p>
<h4>
	重载的老办法
</h4>
<p>
	错误的复制粘贴：
</p>
<p>
	假设没有这个语法……
</p>
<p>
	抽象出一个基本方法：
</p>
<p>
	用重载方法调用基本方法：
</p>
<h4>
	<br>
</h4>
<h4>
	声明和调用
</h4>
<p>
	理解可选：调用时可以选择：写或者不写
</p>
<p>
	</p><p>
		在调用的时候，参数可写可不写
	</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">grow</span><span class="pun">(</span><span class="str">"陈元"</span><span class="pun">);</span><span class="pln">     </span><span class="com">//可选参数不写</span><span class="pln">
</span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> grow</span><span class="pun">(</span><span class="kwd">string</span><span class="pln"> name</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> age </span><span class="pun">=</span><span class="pln"> </span><span class="lit">18</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></pre>
对对对
<p></p>
<p>
</p><pre class="prettyprint lang-cs prettyprinted"><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">ExampleMethod</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> required</span><span class="pun">,</span><span class="pln"> </span><span class="typ">int</span><span class="pln"> optionalInt</span><span class="pun">=</span><span class="kwd">default</span><span class="pun">(</span><span class="typ">int</span><span class="pun">),</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> description</span><span class="pun">=</span><span class="str">"Optional Description"</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"{0}: {1} + {2} = {3}"</span><span class="pun">,</span><span class="pln">
        description</span><span class="pun">,</span><span class="pln"> required</span><span class="pun">,</span><span class="pln"> optionalInt</span><span class="pun">,</span><span class="pln"> required</span><span class="pun">+</span><span class="pln">optionalInt</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>
<p></p>
<p>
	<br>
</p>
<h4>
	其他语法点
</h4>
<ul>
	<li>
		可选参数放在<em>必须（required）</em>参数后面
	</li>
	<li>
		可选参数的默认值必须是“编译时”确定的，比如：常量、字面值、default()表达式、new ValueType……<br>
注意：default(int) 意思是取int的默认值&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //TODO: 用于泛型<br>
	</li>
	<li>
		为了避免模糊，可以指定参数：
<pre class="prettyprint lang-cs prettyprinted"><span class="typ">ExampleMethod</span><span class="pun">(</span><span class="lit">10</span><span class="pun">);</span><span class="com">//所有可选参数都不另外赋值（使用默认值）</span><span class="pln">
</span><span class="typ">ExampleMethod</span><span class="pun">(</span><span class="lit">10</span><span class="pun">,</span><span class="lit">2</span><span class="pun">);</span><span class="com">//最后一个可选参数不另外赋值</span><span class="pln">
</span><span class="typ">ExampleMethod</span><span class="pun">(</span><span class="lit">12</span><span class="pun">,</span><span class="pln">description</span><span class="pun">:</span><span class="str">"Addition with zero:"</span><span class="pun">);</span><span class="pln">
</span><span class="com">//编译器无法通过类型来确定究竟是哪一个参数使用默认值，所以需要指定！</span></pre>
	</li>
	<li>
		可选和非可选参数之间不能构成“重载”<br>
	</li>
</ul>
<p>
	<br>
</p>
<p>
	<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Attachment/2019/2/25/9ed266fe-9e65-42a5-95e4-108198831f1d.png" data-original-title="" zyf-img=""> 
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	params<span></span> 
</h3>
<span>当方法的参数是数组的时候，我们</span><em>可以</em><span>在数组类型前面加一个关键字params：</span> 
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">        </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> getMax</span><span class="pun">(</span><span class="kwd">params</span><span class="pln"> </span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> array</span><span class="pun">)</span></pre>
<span>这样，当我们调用该方法的时候，就</span><em>可以</em><span>（不是必须只能）直接传递数组元素了：</span> 
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    getMax</span><span class="pun">(</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">18</span><span class="pun">,</span><span class="pln"> </span><span class="lit">23</span><span class="pun">);</span><span class="pln">
    </span><span class="com">//等效于：</span><span class="pln">
    getMax</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">int</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">18</span><span class="pun">,</span><span class="pln"> </span><span class="lit">23</span><span class="pln"> </span><span class="pun">});</span></pre>
<br>
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	作业<span></span> 
</h3>
<ol>
	<li>
		定义一个生成数组的方法：int[] GetArray()，其元素随机生成从小到大排列。利用可选参数控制：
	</li>
</ol>
<ul>
	<li>
		最小值min（默认为1）
	</li>
	<li>
		相邻两个元素之间的最大差值gap（默认为5）<br>
	</li>
	<li>
		元素个数length（默认为10个）
	</li>
</ul>
<ol>
	<li>
		实现二分查找，方法名BinarySeek(int[] numbers, int target)：
	</li>
</ol>
<ul>
	<li>
		传入一个有序（从大到小/从小到大）数组和数组中要查找的元素
	</li>
	<li>
		如果找到，返回该元素所在的下标；否则，返回-1
	</li>
</ul>
<p>
	<br>
</p>
<h3>
	作业
</h3>
<ol>
	<li>
		定义一个生成数组的方法：int[] GetArray()，其元素随机生成从小到大排列。利用可选参数控制：
	</li>
	<li>
		最小值min（默认为1）
	</li>
	<li>
		<ul>
			<li>
				相邻两个元素之间的最大差值gap（默认为5）<br>
			</li>
			<li>
				元素个数length（默认为10个）
			</li>
		</ul>
	</li>
	<li>
		实现二分查找，方法名BinarySeek(int[] numbers, int target)：<br>
		<ul>
			<li>
				传入一个有序（从大到小/从小到大）数组和数组中要查找的元素
			</li>
			<li>
				如果找到，返回该元素所在的下标；否则，返回-1
			</li>
		</ul>
	</li>
</ol>
<p>
	<br>
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
    </div>
 