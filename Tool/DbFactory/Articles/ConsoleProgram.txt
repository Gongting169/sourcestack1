

    <div style="clear:both; word-break:break-all; padding-top:20px;">
        学习C#，首先要安装VisualStudio。具体可参考：
<ul>
	<li>
		<a href="http://17bang.ren/Article/640">Visual Studio：安装和使用技巧</a> 
	</li>
	<li>
		<a href="http://17bang.ren/Article/639">Visual Studio：项目和解决方案</a> 
	</li>
</ul>
<p>
	然后，我们需要新建一个：控制台（Console）项目
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/新建控制台.png" data-original-title="" zyf-img=""> 
</p>
<p>
	<span></span> 
</p>
<p>
	<em>复习：</em><a href="http://17bang.ren/Article/158"><em>C#、.NET core和Framework</em></a> 
</p>
<p>
	<span></span> 
</p>
<p>
	<br>
</p>
<h3>
	代码书写区域<br>
</h3>
<p>
	新建的控制台项目只有一个Program.cs，里面有一些你看不懂的代码。
</p>
<p>
	没有关系，现在同学们需要注意的是，代码只能写在如下图指定的两个花括号（{}）中的位置：
</p>
<h3>
	<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Summary/2020/3/5/1/代码书写区域.png" data-original-title="" zyf-img=""><span></span><br>
</h3>
<h3>
	<br>
</h3>
<h3>
	错误和警告
</h3>
<p>
	如果我们把代码写到了错误的位置，VS就会给我们错误（error）提示：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/错误提示.png" data-original-title="" zyf-img=""> 
</p>
<p>
	把鼠标放在错误的代码上面，还可以看到VS生成的错误提示（现在看不懂没关系，但要努力的看，养成习惯慢慢来，^_^）
</p>
<p>
	VS用红色波浪线表示错误，用绿色波浪线表示警告（warning）。错误和警告还可以在Error List窗口中看到：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/ErrorList窗口.png" data-original-title="" zyf-img=""> 
</p>
<p>
	如果项目中有错误，项目是“跑”不起来的；但如果只是警告，项目还可以运行。
</p>
<p>
	错误和警告的区别我们会在后面的学习中深入了解。
</p>
<p>
	<span style="font-size:12px;">PS：程序员无视警告</span> 
</p>
<p>
	<br>
</p>
<h3>
	运行和调试
</h3>
<p>
	确保项目代码没有错误，就可以先让代码“跑”起来看看。（<em><strong>注意：</strong>复习：设置起始项目</em>）
</p>
<p>
	<br>
</p>
<h4>
	<br>
</h4>
<h4>
	Ctrl+F5
</h4>
<p>
	直接使用快捷键Ctrl+F5，就可以看到弹出如下一个窗口：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/Console窗口.png" data-original-title="" zyf-img=""> 
</p>
<p>
	这就是“控制台（console）”，也就是为什么这中项目被称之为“控制台项目”的原因。
</p>
<p>
	Ctrl+F5是<strong>“<strong>不</strong></strong>调试<strong>”</strong>的运行。
</p>
<p>
	<br>
</p>
<h4>
	F5<br>
</h4>
<p>
	F5是<strong>调试</strong>运行。调试（debug）的关键在于设置<strong>断点</strong>（breakpoint）。
</p>
<p>
	在VS的C#代码中，按下F9，就会在当前光标所在行设置一个断点；再按一次F9，就可以取消这一行的断点。
</p>
<p>
	设置断点后按F5运行项目，VS就会在运行到断点位置的时候停下来，这就被称之为“击中”了断点。（如果断点没有被击中，就说明代码运行的时候没有跑到这一行来，为什么这样<a href="http://17bang.ren/Article/263" target="_blank">分支</a>的时候会讲）
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/击中断点.png" data-original-title="" zyf-img=""> 
</p>
<p>
	在断点位置，我们就可以查看程序内部的一些运行情况（<em>后面会有大量演示</em>）。
</p>
<p>
	要想继续运行代码，我们可以按：
</p>
<ul>
	<li>
		F10：执行下一条语句
	</li>
	<li>
		F5：执行完剩下的全部代码，直到程序结束或下一个断点<br>
	</li>
	<li>
		F11：进入当前语句的内部调用代码（<em>学习</em><a href="http://17bang.ren/Article/299" target="_blank"><em>方法</em></a><em>时会讲</em>）
	</li>
</ul>
<p>
	<br>
</p>
<p>
	有时候，项目设置了太多断点，我们可以按 Ctrl+Shift+F9 取消所有断点。
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	Build<br>
</h3>
<p>
	<br>
</p>
<p>
	又称之为“生成”，或者“编译”（<em>复习：什么是编译？</em>）
</p>
<p>
	运行项目其实包含了两个过程：
</p>
<ol>
	<li>
		编译C#源代码
	</li>
	<li>
		运行编译后代码<br>
	</li>
</ol>
<p>
	VS会把控制台项目编译后文件放置在<strong>bin</strong>文件夹中，把调试用信息放置在<strong>obj</strong>文件夹中（<em>复习：VS中查看隐藏文件</em>）
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/bin和obj.png" data-original-title="" zyf-img=""> 
</p>
<p>
	我们也可以不运行程序，而<strong>只是</strong>build项目。这就需要在项目上右键点击：
</p>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/Build项目.png" data-original-title="" zyf-img=""><br>
<p>
	<br>
</p>
<ul>
	<li>
		build：编译项目。点击build之后，就可以在output窗口中发现：<br>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/Build-output.png" data-original-title="" zyf-img=""><br>
	</li>
	<li>
		rebuild：重新编译项目。为什么需要“重新”编译？<br>
因为在build的时候，VS会智能检查：和上次编译相比，源代码是否发生改变。如果没有变化，VS就不会再次编译：<br>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/假的build-output.png" data-original-title="" zyf-img=""><br>
一般情况下，这没有问题，但有时候VS“智能”变“智障”，我们就可以强制要求重新编译！<br>
	</li>
	<li>
		clean：删除bin和obj文件夹下所有编译后文件。如果clean都无法解决问题，我们可以更直接粗暴的删除obj和bin文件夹<br>
	</li>
</ul>
<p>
	<br>
</p>
<h3>
	<br>
</h3>
<h3>
	Release和Debug
</h3>
<p>
	在VS的工具栏上，还有这么一个选项：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/debug和release.png" data-original-title="" zyf-img=""> 
</p>
<p>
	这决定了VS如何编译你的项目：
</p>
<ul>
	<li>
		Debug：以“调试模式”进行编译。如果使用F5进行调试，只能选择这种模式。
	</li>
	<li>
		Release：以“发布模式”进行编译。这样没有包含调试信息，程序会运行得更快，但无法调试。<br>
	</li>
</ul>
<h3>
	<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/Release下debug.png" data-original-title="" zyf-img=""><br>
</h3>
<h3>
	<br>
</h3>
<h3>
	<span></span>输入/输出
</h3>
<p>
	实事求是的说，控制台项目并不是一个“用户交互友好”的项目，它的输出输入非常简单：
</p>
<ul>
	<li>
		Console.WriteLine("源栈欢迎你")：把括号里面的内容（源栈欢迎你）输出到控制台窗口
	</li>
	<li>
		Console.ReadLine()：接收用户在控制台窗口输入的内容<br>
<span style="font-size:12px;">PS：VS2019以前的版本，Debug模式下运行控制台程序，运行结束后会自动关闭控制台。我们通常在代码末尾添加一行</span><span style="font-size:12px;">Console.ReadLine();让控制台程序不被关闭</span><span style="font-size:12px;"></span><br>
	</li>
</ul>
<p>
	所以它通常只用于自动运行的一些小程序。
</p>
<p>
	但用来学习C#语法也刚好合适，因为足够“单纯”，^_^
</p>
<p>
	<br>
</p>
<p>
	<br>
</p>
<h3>
	作业
</h3>
<ol>
	<li>
		新建一个控制台项目
	</li>
	<li>
		设置一个断点，运行项目，击中断点
	</li>
	<li>
		<span></span>build/rebuild/clean项目，并查看obj和bin文件夹中内容
	</li>
	<li>
		能在obj和bin文件夹中生成Release文件夹，并解释为什么
	</li>
</ol>
<p>
	<br>
</p>
<p>
	<strong></strong> 
</p>
    </div>
