
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <span><span></span></span><span><span><span></span></span></span>计算机本质上就是用来进行“计算”的，而计算，除了变量还需要<strong>运算符（operator）</strong>。
<h3>
	<br>
</h3>
<h3>
	赋值运算符
</h3>
<p>
	其实我们前面已经接触过的等号（=），就是一种运算符，作用是赋值（assignment），所以被称之为：赋值运算符。
</p>
<p>
	可以在一条语句中赋值同类型的多个变量：
</p>
<pre class="prettyprint lang-js prettyprinted"><span class="pln">    </span><span class="kwd">int</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span></pre>
<h4>
</h4>
<h4>
	<br>
</h4>
<h4>
	右连接
</h4>
<p>
	赋值运算符是<strong>右</strong>连接的：即在一个表达式中，运算是从右到左进行的。比如：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> c</span><span class="pun">;</span><span class="pln">
    a </span><span class="pun">=</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="lit">50</span><span class="pun">;</span></pre>
<p>
	运算顺序是：
</p>
<ol>
	<li>
		把50赋值给c
	</li>
	<li>
		把c的值赋值给b
	</li>
	<li>
		把b的值赋值给a
	</li>
</ol>
<p>
	接下来讲的运算符大多数都是<strong>左</strong>连接的。
</p>
<h3>
	<br>
</h3>
<h3>
	取值
</h3>
<p>
	<span>容易被忽视的：点（.）</span>，类似于中文“的”。在学习了类和对象的时候会详细讲解。
</p>
<p>
	<br>
</p>
<h3>
	算术
</h3>
<p>
	<span>还有我们非常熟悉的加（+）减（-）乘（*）除（/），这些都是算术运算符。</span> 
</p>
<p>
	<span>需要注意的是：<span>整数除以整数，结果还是整数。要想结果为小数，除数或被除数，至少要有一个是小数：</span> </span> 
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">12</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">5</span><span class="pun">);</span><span class="pln">  </span><span class="com">//结果为2</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">12F</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">5</span><span class="pun">);</span><span class="pln"> </span><span class="com">//结果为2.4</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">12</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">5F</span><span class="pun">);</span><span class="pln"> </span><span class="com">//结果为2.4</span></pre>
所以，整数除整数可以取余（%） <span></span> 
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">13</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">5</span><span class="pun">);</span><span class="pln">  </span><span class="com">//结果是余数，为3</span></pre>
<h4>
	<br>
</h4>
<h4>
	意外
</h4>
<p>
	试一试：0.1+0.2，结果为什么不是0.3？这不是bug，是计算机进行小数运算时很难解决的问题。<span></span> 
</p>
<p>
	简单的解释是：计算机在把十进制的0.1或0.2转换成二进制时丢失了“精度”，就好像我们在把1/3转换成0.333333333333333333时丢失了一点点数据一样。、
</p>
<p>
	<span></span> 
</p>
<br>
<h4>
	运算符优先级
</h4>
<p>
	就想我们学习四则运算时那样，加减乘除堆在一起之后，先乘除后加减：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">3</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">  </span><span class="com">// 结果不是0而是5</span></pre>
<p>
	这就被称之为<strong>运算符优先级</strong>：一个表达式中有多个运算符，C#会按优先级从高到低，依次计算。
</p>
<p>
	所有运算符的优先级可以参考：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/#operator-precedence" target="_blank" rel="nofollow">Microsoft Doc</a>，但是，飞哥<strong>推荐</strong>优先使用圆括号（()），提高代码的<strong>可读性</strong>。C#总是首先计算圆括号中的内容，比如：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">((</span><span class="lit">3</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">  </span><span class="com">// 结果是0</span></pre>
<p>
	<span style="font-size:12px;">PS：</span><span style="font-size:12px;">牛逼的代码，</span><strong><span style="font-size:12px;"></span><span style="font-size:12px;">不</span></strong><span style="font-size:12px;">是别人读不懂的代码，而是别人能读懂的代码！千万千万不要搞反了。</span> 
</p>
<ul>
	<li>
		<span style="font-size:12px;">要想别人看不懂，最简单的方法是使用<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86" target="_blank" rel="nofollow">混淆器</a></span> 
	</li>
	<li>
		搞怪：<span style="font-size:12px;"><a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85C%E8%AF%AD%E8%A8%80%E6%B7%B7%E4%B9%B1%E4%BB%A3%E7%A0%81%E5%A4%A7%E8%B5%9B/8089471" target="_blank" rel="nofollow">国际C语言混乱代码大赛</a></span> 
	</li>
</ul>
<p>
	<br>
</p>
<h3>
	比较
</h3>
<p>
	数值之间还可以进行比较：
</p>
<ul>
	<li>
		大于（&gt;）
	</li>
	<li>
		小于（&lt;）
	</li>
	<li>
		等于（==）
	</li>
	<li>
		不等于（!=）
	</li>
	<li>
		大于等于（&gt;=）
	</li>
	<li>
		小于等于（&lt;=）<br>
	</li>
</ul>
<p>
	<strong>注意</strong>：
</p>
<ul>
	<li>
		不是所有类型的数据之间都可以进行比较：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    bool result </span><span class="pun">=</span><span class="pln"> </span><span class="str">"3"</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln">   </span><span class="com">//报错</span><span class="pln">
    bool result </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3.5M</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">2.2</span><span class="pun">;</span><span class="pln">   </span><span class="com">//报错</span></pre>
	</li>
	<li>
		比较之后的结果是一个bool值，所以：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    bool easier </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1.5</span><span class="pun">/</span><span class="lit">0.5</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0.5</span><span class="pun">/</span><span class="lit">0.3</span><span class="pun">;</span></pre>
<span></span> 
	</li>
</ul>
<h3>
	<br>
</h3>
<h3>
	逻辑
</h3>
<p>
	还可以针对bool值进行逻辑运算，包括：
</p>
<ul>
	<li>
		取反（!）：true取反，就是false；false取反就是true
	</li>
	<li>
		或（||）：两个布尔值使用“<span>或</span>”运算，只要有一个布尔值为true，运算结果为true
	</li>
	<li>
		且（&amp;&amp;）：<span>两个布尔值使用“且</span><span>”运算，只要有一个布尔值为false，运算结果为false</span> 
	</li>
</ul>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(!</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">           </span><span class="com">//结果为false</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">true</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">   </span><span class="com">//结果为true</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">true</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">   </span><span class="com">//结果为false</span></pre>
<h4>
	<span></span><br>
</h4>
<h4>
	和位运算的区别【常见面试题】
</h4>
<p>
	实际上，还有两个运算符：按位或（|）和<span>按位与</span>（&amp;），和逻辑运算符很类似，而且作用也类似：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">true</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">   </span><span class="com">//结果为true</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="kwd">true</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">   </span><span class="com">//结果为false</span></pre>
<p>
	既然这样的话，这种位运算和逻辑运算又什么区别呢？<span></span> 
</p>
<p>
	首先，位运算本质上是在二进制上运算的，它可以把bool值都先转换成二进制，把1当成true，0当成false，按逻辑或/且进行运算
</p>
<ul>
	<li>
		|：只要有一个1，运算结果为1；
	</li>
	<li>
		&amp;：只要有一个0，运算结果为0；
	</li>
</ul>
<p>
	此外，|和&amp;还可以用于int值
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//位或可以应用于整数和bool值</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">2</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="lit">4</span><span class="pun">);</span><span class="pln">   </span><span class="com">/*猜一猜结果是多少？*/</span></pre>
||和&amp;&amp;不能应用于整数：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">   </span><span class="com">//报错</span></pre>
<ul>
	<li>
		短路运算：一旦得到运算结果，就不再进行后面的运算
	</li>
	<li>
		非短路运算：（|）和（&amp;），不推荐……
	</li>
</ul>
<h3>
	<br>
</h3>
<h3>
	其他
</h3>
组合运算符：<br>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
    n </span><span class="pun">=</span><span class="pln"> n </span><span class="pun">+</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
    </span><span class="com">//可以简写成：</span><span class="pln">
    n </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
    </span><span class="com">//如果是n+=1的话，还可以进一步简写成：</span><span class="pln">
    n</span><span class="pun">++;</span><span class="pln">
    </span><span class="com">//或者</span><span class="pln">
    </span><span class="pun">++</span><span class="pln">n</span><span class="pun">;</span></pre>
<p>
	加减乘除都可以这样组合，比如：减等于（-=）、累减（--）、累乘（**）……
</p>
<h3>
	<span></span><br>
</h3>
<h3>
	字符串
</h3>
<p>
	拼接（+）：除了可以拼接字符串，通过运算符重载，还可以拼接字符串和其他类型变量（如整数/小数/布尔值）
</p>
<p>
	PS：字符串内插 $"ssssss{variable1}tttttttt{variable2}rrr<span></span>r"
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"你好，"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> input </span><span class="pun">+</span><span class="pln"> </span><span class="str">"！源栈，欢迎您"</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">$</span><span class="str">"你好，{input}！源栈，欢迎您"</span><span class="pun">);</span></pre>
<h4>
	<br>
</h4>
<h4>
	转义
</h4>
<p>
	的
</p>
<h3>
	<br>
</h3>
<h3>
	作业
</h3>
<ol>
	<li>
		输出两个整数/小数的和/差/积/商
	</li>
	<li>
		电脑计算并输出：[(23+7)x12-8]÷6的小数值<em>（挑战：精确到小数点以后2</em><em>位）</em><br>
	</li>
	<li>
		想一想以下语句输出的结果：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">15</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i</span><span class="pun">++);</span><span class="pln">
    i </span><span class="pun">-=</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"i值的最终结果为："</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">int</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">$</span><span class="str">"{i}+{j}={i + j}"</span><span class="pun">);</span><span></span></pre>
<span></span> 
	</li>
	<li>
		想一想如下代码的结果是什么，并说明原因：
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">a </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">9</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">(!(</span><span class="pln">a </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">11</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> a </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">));</span></pre>
	</li>
	<li>
		当a为何值时，结果为true？
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">bool result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">a </span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">12</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> a </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3.14</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> a </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">11</span><span class="pun">;</span><span></span></pre>
	</li>
</ol>
<p>
	<br>
</p>
    </div>
  