
    <div style="clear:both; word-break:break-all; padding-top:20px;">
        <p>
	<span></span>我们来把这句代码改一下：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">&nbsp; &nbsp; </span><span class="com">//Console.WriteLine("源栈欢迎你！");</span><span class="pln">

&nbsp; &nbsp; </span><span class="com">//修改为：</span><span class="pln">
&nbsp; &nbsp; </span><span class="kwd">string</span><span class="pln"> greet</span><span class="pun">;</span><span class="pln">
&nbsp; &nbsp; greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span><span class="pln">
&nbsp; &nbsp; </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">greet</span><span class="pun">);</span></pre>
<p>
	<br>
</p>
<h3>
	*注释*
</h3>
<p>
	<span></span> 
</p>
<p>
	C#中提供三种注释（comment）：
</p>
<ul>
	<li>
		//：行注释。注释的内容从 // 开始，直到这一行结束。
	</li>
	<li>
		/**/：块注释。注释的内容从&nbsp;<span>/* 开始，到 */ 结束。注释的内容既可以是一行，也可以是多行。</span> 
	</li>
	<li>
		///：多行注释。严格来讲这应该就是行注释（<span>//</span>）的延续：它和//唯一的区别就是///引导的<span>注释内容在换行时会自动添加///头（<em>演示</em>）
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">///第一行注释</span><span class="pln">
    </span><span class="com">///换行自动生成"///"</span><span class="pln">
    </span><span class="com">///</span></pre>
</span> 
	</li>
</ul>
<span> 
<p>
	<em>（复习：注释的作用</em><em>）</em> 
</p>
<p>
	<span style="font-size:12px;">PS：以上注释命名都是飞哥自己取的，^_^</span> 
</p>
</span> 
<h3>
	<br>
</h3>
<h3>
	变量
</h3>
<p>
	继续我们之前代码，修改后的代码实际上是引入了<span>string</span><strong>变量</strong>greet。
</p>
<h4>
	<br>
</h4>
<h4>
	一个盒子
</h4>
<p>
	变量（variable），可以把它想象成一个“盒子”：
</p>
<p>
	</p><table border="1">
		<tbody><tr>
			<td>
				<span style="font-size:16px;"><strong>语句</strong></span> 
			</td>
			<td>
				<span style="font-size:16px;"><strong>用盒子做比喻</strong></span> 
			</td>
			<td>
				<span style="font-size:16px;"><strong>业内说法</strong></span> 
			</td>
		</tr>
		<tr>
			<td>
				<span>string greet;</span><br>
			</td>
			<td>
				新建一个可以装string类型数据的盒子，盒子被取名为greet<br>
			</td>
			<td>
				<span><strong>声明<span>（declare）</span></strong>了一个string类型的变量greet</span><br>
			</td>
		</tr>
		<tr>
			<td>
				<span>greet = "源栈欢迎你！"</span><br>
			</td>
			<td>
				<span>把数据</span><span>"源栈欢迎你！"放到greet这个盒子里</span><br>
			</td>
			<td>
				将<strong>变量值</strong><span>"源栈欢迎你！"<strong>赋值（assign）</strong>给</span>greet
			</td>
		</tr>
		<tr>
			<td>
				Console.WriteLine(greet);<br>
			</td>
			<td>
				取出greet中的数据，并在控制台输出
			</td>
			<td>
				<strong>使用</strong>变量greet，将其控制台输出
			</td>
		</tr>
	</tbody></table>
<p></p>
<p>
	注意：我们使用变量，就是使用变量这个盒子中存放的数据。
</p>
<p>
	此外所谓变量的“<span>变</span>”，就是盒子中存放的数据是可以变化的：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">&nbsp; &nbsp; </span><span class="com">//修改为：</span><span class="pln">
&nbsp; &nbsp; </span><span class="kwd">string</span><span class="pln"> greet</span><span class="pun">;</span><span class="pln">
&nbsp; &nbsp; greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span><span class="pln">&nbsp; &nbsp; &nbsp;</span><span class="com">/*第一次赋值*/</span><span class="pln">
&nbsp; &nbsp; </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">greet</span><span class="pun">);</span><span class="pln">

&nbsp; &nbsp; </span><span class="com">//再添加：</span><span class="pln">
&nbsp; &nbsp; greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"大神小班"</span><span class="pun">;</span><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="com">/*第二次赋值*/</span><span class="pln">
&nbsp; &nbsp; </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">greet</span><span class="pun">);</span></pre>
<p>
	<a href="http://17bang.ren/Article/292" target="_blank"><strong><span></span>赋值</strong></a><span></span>：将“值”赋予给变量
</p>
<p>
	一个盒子一次只能存放一条数据。所以第二次赋值，就将greet中存放的数据“<span>变</span>”成了"大神小班"——这就是变量（variable）名称的由来。
</p>
<p>
	变量也可以在声明的时候马上赋值：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">string</span><span class="pln"> greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span></pre>
<p>
	在变量未赋值前，它会有一个<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/default-values-table" target="_blank" rel="nofollow">默认值</a>。默认值依变量类型不同而不同，比如string类型的默认值是“<span>空字符串</span>”。
</p>
<h4>
	<br>
</h4>
<h4>
	常量
</h4>
<p>
	和变量相对的是常量（constant）。常量就不应该想像成一个“<span>盒子</span>”，或者你只能把它想像成这样一个有些奇怪的盒子：
</p>
<ul>
	<li>
		一旦创建，就马上要放入内容
	</li>
	<li>
		一旦放入内容，就再也不能改变内容
	</li>
</ul>
<p>
	声明常量需要关键字const：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//报错：常量一旦声明必须马上赋值</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> greet</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span><span class="pln">
    </span><span class="com">//报错：常量赋值后无法更改</span><span class="pln">
    greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"大神小班"</span><span class="pun">;</span></pre>
<p>
	常量在编译时处理，字面量（赋值给变量的值<span></span>）也就是常量。
</p>
<p>
	<strong>注意</strong>：
</p>
<ul>
	<li>
		变量和常量都<strong>必须</strong>先声明，再使用。否则<em>报错</em>
	</li>
	<li>
		只声明，不警告，会有<em>警告</em><br>
	</li>
</ul>
<h4>
	<br>
</h4>
<h4>
	语法解析
</h4>
<p>
	从上述代码，我们可以看出一些C#中的基本语法点：
</p>
<ul>
	<li>
		关键字：string/const这些都是关键字，关键字会高亮显示，变量名不得使用关键字
	</li>
	<li>
		空格：一个空格和多个空格效果是一样的，关键字和变量名之间必须使用空格分隔
	</li>
	<li>
		分号（;）：一条语句的结束，<strong>不</strong>以换行符而是以;为准
	</li>
	<li>
		空行：所以，由空白和换行符组成的空行不会影响代码运行，同学们注意合理使用空行增加代码的可读性
	</li>
</ul>
变量和运算符结合，就形成<strong>表达式</strong><strong>（expression）</strong>。
<p>
	将（某些）表达式用分号（;）分隔，就形成<strong>语句（statement）</strong>。哪些表达式可以构成语句呢？我们可以看VS的提示：
</p>
<p>
	<img title="" class="img-responsive" alt="" src="http://17bang.ren/Images/Summary/2020/3/6/1/表达式.png" data-original-title="" zyf-img=""> 
</p>
<p>
	所以，赋值表达式就可以是语句。
</p>
<p>
	除了记忆，我们还可以从原理上来理解：语句，就像一句话一样，是一条<strong>完整的</strong>对计算机的指示。“<span>不完整</span>”的指示就不能是一条语句。比如：3+2;就不完整，3+2=5，但等于5之后呢？是赋值给一个变量，还是把它控制<span></span>台输出来？得给句话啊！所以，这才是语句：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">int</span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="lit">3</span><span class="pun">+</span><span class="lit">2</span><span class="pun">);</span></pre>
<h4>
	<br>
</h4>
<h4>
	作用域（scope）
</h4>
<p>
	即：变量起<strong>作用</strong>的领<strong>域</strong>。
</p>
<p>
	该“领域”就是：变量声明所在的花括号（{}）内。
</p>
<ul>
	<li>
		在该领域内，不能有同名的变量声明
	</li>
	<li>
		在该领域外，变量不能被使用<br>
	</li>
</ul>
<p>
	<span></span><em>演示：略</em><span></span>
</p>
<h4>
	<span><br>
</span> 
</h4>
<h3>
	<span>强类型</span><span>语言</span> 
</h3>
<p>
	C#是一种“<span>强类型</span><span>语言</span>”，所以：
</p>
<ul>
	<li>
		在声明变量的时候，必须指明变量的类型。
	</li>
	<li>
		而且类型一旦声明，该变量就只能存储这种类型的数据
	</li>
</ul>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="com">//不能省略string类型声明</span><span class="pln">
    </span><span class="kwd">string</span><span class="pln"> greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span><span class="pln">
    </span><span class="com">//greet已经是string类型的变量，就不能再被赋值为int（整数）类型数据了</span><span class="pln">
    greet </span><span class="pun">=</span><span class="pln"> </span><span class="lit">986</span><span class="pun">;</span></pre>
<h4>
	<br>
</h4>
<h4>
	推导类型var
</h4>
<p>
	你可能看到有这样的写法：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> </span><span class="com">/*不是string*/</span><span class="pln"> greet </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎你！"</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> </span><span class="com">/*不是int*/</span><span class="pln"> fee </span><span class="pun">=</span><span class="pln"> </span><span class="lit">986</span><span class="pun">;</span></pre>
咦？var究竟是什么类型，为什么又可以作为字符串（string）greet的类型声明，又可以作为整数（int）fee的类型声明？是不是使用var定义的变量就是“<span>类型可变</span>”，<span>是“弱类型”的？</span> 
<p>
	<span style="font-size:16px;">错！</span>由关键字var定义的变量，仍然是强类型变量。它其实就是一个“<strong>语法糖</strong>”（即方便了代码的书写，但没有在语法<span>本质上进行<span>改变</span></span>），又被称之为“推导类型”，即：
</p>
<p>
	由var定义的变量，其类型是由赋值数据类型决定的，或者说，C#编译器会自动推导出其类型。<br>
<img title="" class="img-responsive" alt="" src="/Images/Summary/2020/3/5/1/var类型变量.png" data-original-title="" zyf-img=""> 
</p>
<p>
	所以，上述代码中，greet就是string类型，fee就是int类型。而且他们一旦被定义，就不能再更改：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> greet</span><span class="pun">;</span><span class="pln">    </span><span class="com">//报错：greet未被赋值，无法推导其类型</span></pre>
<p>
	<br>
</p>
<p>
	<span style="font-size:16px;">但是</span>，飞哥不建议在任何时候都使用<strong>var</strong>，甚至要求同学们只能在特定情况下才能使用var。因为滥用var，会降低代码的可读性，尤其是当赋值的数据类型不能“<span>一眼看穿（使用了方法等）</span>”的时候。
</p>
<p>
	<br>
</p>
<p>
	<strong></strong> 
</p>
<h3>
	<strong>常用变量类型</strong> 
</h3>
<p>
	<strong><strong></strong></strong> 
</p>
<h4>
	<br>
</h4>
<h4>
	字符和字符串
</h4>
<p>
	<span><em>复习：编码</em></span><em></em> 
</p>
<ul>
	<li>
		char：字符，包括字母（如a）、数字（如1）、运算符号（如+）、标点符号（如。）和其他符号（如~），以及一些功能性符号（如ctrl）。实际开发中用得不多，但它是字符串的基础。<br>
<strong>注意</strong>：C#中：<br>
		<ol>
			<li>
				一个字符变量只能存储一个字符
			</li>
			<li>
				字符用<strong>单</strong>引号（''）包裹
			</li>
		</ol>
	</li>
	<li>
		string：字符串，在编程开发中大量使用，本质上就是由一个一个的字符“串”起来的。关于她的内容实现机制，后文会有详述……字符串用<strong>双</strong>引号（“”）包裹
	</li>
</ul>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">char</span><span class="pln"> source </span><span class="pun">=</span><span class="pln"> </span><span class="str">'源'</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">string</span><span class="pln"> welcome </span><span class="pun">=</span><span class="pln"> </span><span class="str">"源栈欢迎您"</span><span class="pun">;</span></pre>
<p>
	<br>
</p>
<h4>
	数值
</h4>
<p>
	数值（numeric）类型分为<strong>整数</strong>和<strong>小数</strong>。
</p>
<p>
	<br>
</p>
<p>
	<strong>1）整数</strong> 
</p>
<p>
	C#根据“最多能够存储的数值大小”，将整数分为：
</p>
<ul>
	<li>
		byte：8位
	</li>
	<li>
		short：16位
	</li>
	<li>
		int：32位
	</li>
	<li>
		long：64位
	</li>
</ul>
<p>
	上述所称的“位（bit）”，又被称之为“长度（Length）”，是指变量以二进制形式存储时，能够占据的空间。我们可以把1位，想象成1格，每一格都只能存放1或0。所以：
</p>
<ul>
	<li>
		1位，只能存2个（2的1次方，用2^1表示）数字：1和0，最大为1；
	</li>
	<li>
		2位，只能存4个（2^2）数字：00/01/10/11，最大为11（二进制）
	</li>
	<li>
		3位，只能存8个（2^3）数字：000/001/010/011/100/101/110/111，最大为111
	</li>
	<li>
		……
	</li>
	<li>
		8位，就能够存2^8个数字，最大为11111111，转换为十进制：2^8-1=255
	</li>
</ul>
但是，除了byte，short/int/long都是既能存正数，也能存负数，所以需要额外占用一位（格）来存正/负符号，所以他们的存储范围是 -2^(n-1) -1到 2^(n-1)-1<br>
<p>
	同时，除byte外，short/int/long都可以在类型前面加一个<strong>u</strong>，将其限定为<strong>正</strong>整数。
</p>
<p>
	超过最大存储数值的赋值会报错：
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="kwd">byte</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">255</span><span class="pun">;</span><span class="pln">   </span><span class="com">//OK</span><span class="pln">
    </span><span class="kwd">byte</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">257</span><span class="pun">;</span><span class="pln">   </span><span class="com">//报错</span><span class="pln">
    </span><span class="kwd">short</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> </span><span class="lit">257</span><span class="pun">;</span><span class="pln">  </span><span class="com">//OK</span></pre>
<p>
	我们实际开发中，最常用的是int类型；I/O文件流时，会使用到byte。
</p>
<p>
	<span><strong>注意</strong>：区分"32"和32，有引号（“”）和没引号</span> 
</p>
<p>
	<br>
</p>
<p>
	<strong>2）小数</strong> 
</p>
<p>
	计算机中小数的存储比整数麻烦一些，但大体上来说，小数也可以说是“按能存储的数值的大小”
</p>
<ul>
	<li>
		float（浮点/单精度）：
	</li>
	<li>
		double（双精度，默认）：
	</li>
	<li>
		decimal：
	</li>
</ul>
<p>
	<br>
</p>
<pre class="prettyprint lang-cs prettyprinted"><span class="pln">    </span><span class="typ">float</span><span class="pln"> score </span><span class="pun">=</span><span class="pln"> </span><span class="lit">85.5F</span><span class="pun">;</span><span class="pln">    </span><span class="com">//不要忘了F后缀</span><span class="pln">
    </span><span class="kwd">double</span><span class="pln"> avgScore </span><span class="pun">=</span><span class="pln"> </span><span class="lit">92.32345</span><span class="pun">;</span><span class="pln">    </span><span class="com">//可以不要后缀</span><span class="pln">
    </span><span class="kwd">decimal</span><span class="pln"> height </span><span class="pun">=</span><span class="pln"> </span><span class="lit">76.38M</span><span class="pun">;</span><span class="pln">    </span><span class="com">//不要忘了F后缀</span></pre>
<p>
	<br>
</p>
<h4>
	布尔值
</h4>
<p>
	bool：值<strong>只能</strong>是true/false，（和其他语言不通）<strong>不能</strong>是1/0啥的……
</p>
<p>
	<br>
</p>
<h3>
	<strong>类型转换<span></span></strong> 
</h3>
<p>
	相关（近似，比如数值类型）间可以有：
</p>
<ul>
	<li>
		隐式（自动）：短变长
<pre class="prettyprint lang-cs prettyprinted"><span class="typ">int</span><span class="pln"> age </span><span class="pun">=</span><span class="pln"> </span><span class="lit">23</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">long</span><span class="pln"> lage </span><span class="pun">=</span><span class="pln"> age</span><span class="pun">;</span><span class="pln">             </span><span class="com">//int可隐式转换成long</span></pre>
	</li>
	<li>
		显式：长变短
<pre class="prettyprint lang-cs prettyprinted"><span class="kwd">short</span><span class="pln"> sAge </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">short</span><span class="pun">)</span><span class="pln">age</span><span class="pun">;</span><span class="pln">     </span><span class="com">//int转换成short需要显式转换，注意可能有“精度”损失</span><span class="pln">
</span><span class="com">//string strAge = (string)age; //无法在“大类”之间进行强制转换</span></pre>
	</li>
</ul>
<span>不是所有的类型间都可以进行强制（显式）转换，完全<span></span><em>不相关</em><span></span>类型间的转换需要使用<span></span></span>函数：Convert.ToXXX() / Parse() /ToString()，
<pre class="prettyprint lang-cs prettyprinted"><span class="com">//大类之间通过函数进行转换</span><span class="pln">
</span><span class="kwd">string</span><span class="pln"> strAge </span><span class="pun">=</span><span class="pln"> </span><span class="str">"23"</span><span class="pun">;</span><span class="pln">
</span><span class="typ">float</span><span class="pln"> fAge </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Convert</span><span class="pun">.</span><span class="typ">ToSingle</span><span class="pun">(</span><span class="pln">strAge</span><span class="pun">);</span><span class="pln">
</span><span class="typ">int</span><span class="pln"> iAge </span><span class="pun">=</span><span class="pln"> </span><span class="typ">int</span><span class="pun">.</span><span class="typ">Parse</span><span class="pun">(</span><span class="pln">strAge</span><span class="pun">);</span><span class="pln">

</span><span class="com">//strAge = "二十三";</span><span class="pln">
</span><span class="com">//float wAge = Convert.ToSingle(strAge);  //无法转换，运行时错误</span></pre>
<p>
	理解<span></span>：运行时错误 vs 编译时错误
</p>
<h3>
	<br>
</h3>
<h3>
	作业：
</h3>
<p>
	观察一起帮<a href="http://17bang.ren/Profile/Write" target="_blank">个人资料</a>页面，用合适的变量类型存储页面用户输入信息，并解释为什么。
</p>
<br>
<p>
	<strong> </strong> 
</p>
<strong></strong>
    </div>
